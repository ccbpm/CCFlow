<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script type="text/javascript" src="../Scripts/bootstrap/js/jquery.min.js"></script>
    <script language="JavaScript" src="../Comm/JScript.js" type="text/javascript" ></script>
    <script type="text/javascript" src="../Scripts/bootstrap/js/bootstrap.min.js"></script>
    <script src="../Scripts/QueryString.js" type="text/javascript"></script>
    <script src="../Scripts/config.js" type="text/javascript"></script>
     <base target="_self" /> 
    <link href="../Comm/Style/Table0.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../Scripts/easyUI145/themes/default/easyui.css" />
	<link rel="stylesheet" type="text/css" href="../Scripts/easyUI145/themes/icon.css" />
    <script type="text/javascript" src="../Scripts/easyUI145/jquery.min.js"></script>
	<script type="text/javascript" src="../Scripts/easyUI145/jquery.easyui.min.js"></script>
    <script type="text/javascript" src="../Scripts/easyUI145/locale/easyui-lang-zh_CN.js"></script>

    <script type="text/javascript" src="../Scripts/bootstrap/js/commonYangYH.js"></script>
    <script type="text/javascript" src="MapExt2016.js"></script>
    <script language="javascript" type="text/javascript" >
        var hjl = new Array(); //合计列名称集合
        var mapExt; //mapExt扩展
        var isEditable;
        /* ESC Key Down */
        function Esc() {
            if (event.keyCode == 27)
                window.close();
            return true;
        }

        //页面启动函数.
        $(function () {

            $("#Msg").html("正在加载,请稍后......");

            InitPage();

            $("#Msg").html("");
        });

        //公共方法
        function AjaxServiceGener(param, callback, scope) {
            $.ajax({
                type: "GET", //使用GET或POST方法访问后台
                dataType: "text", //返回json格式的数据
                contentType: "application/json; charset=utf-8",
                url: Handler, //要访问的后台地址
                data: param, //要发送的数据
                async: true,
                cache: false,
                complete: function () { }, //AJAX请求完成时隐藏loading提示
                error: function (XMLHttpRequest, errorThrown) {
                    callback(XMLHttpRequest);
                },
                success: function (msg) {//msg为返回的数据，在这里做数据绑定
                    var data = msg;
                    callback(data, scope);
                }
            });
        }
        var saveFlag = true;
        var updateRowIndex;
        //function SaveRow(index) {
        //    var row = $('#dg').datagrid('getData').rows[Number(index)]; // $('#dg').datagrid('selectRow', { index: rowIndex });
        //    console.info(row);
        //    row.DoType = "Dtl_SaveRow";
        //    row.FK_MapDtl = GetQueryString("EnsName");
        //    //row.FK_MapData = "ND101";
        //    row.RefPKVal = GetQueryString("RefPKVal");
        //    updateRowIndex = index;
        //    AjaxServiceGener(row, SaveRowAfter, this);
        //}

        function saveRow(index) {
            saveRowCurrent.count = 1;
            saveRowCurrent.overCount = 0;
            //获取序号的值
            saveRowCurrent.rowIndex = parseInt($($(index).parent().parent().children()[0]).text()) - 1;

            $(index).attr('enable', false);
            $(index).css('background', 'gray');

            var row = $(index).parent().parent().data().data; // $('#dg').datagrid('selectRow', { index: rowIndex });
            row.DoType = "Dtl_SaveRow";
            row.FK_MapDtl = GetQueryString("EnsName");
            //row.FK_MapData = "ND101";
            row.RefPKVal = GetQueryString("RefPKVal");
            updateRowIndex = index;
            AjaxServiceGener(row, SaveRowAfter, this);
        }

        /*
        count：需要保存的行数
        overCount：已经保存完的行数
        saveAll:是否保存所有行
        rowIndex 只有当 saveAll=false 时，设置保存行的序号  从0开始
        */
        var saveRowCurrent = { count: 0, overCount: 0, saveAll: false, rowIndex: 0 };
        //保存所有行
        function saveAllRow() {
            $('#Message').html('数据正在保存，请稍后');
            $('#dtlDiv').hide();
            $('#Message').show();
            $('#saveBtn').attr('enable', 'true');
            $('#saveBtn').css('background', 'gray');
            //循环保存所有行
            var trs = $('#dtlDiv div table tbody tr');
            saveRowCurrent.count = trs.length;
            saveRowCurrent.overCount = 0;
            saveRowCurrent.saveAll = true;
            saveRowCurrent.rowIndex = 0;

            $.each(trs, function (i, trObj) {
                var row = $(trObj).data().data; // $('#dg').datagrid('selectRow', { index: rowIndex });
                row.DoType = "Dtl_SaveRow";
                row.FK_MapDtl = GetQueryString("EnsName");
                //row.FK_MapData = "ND101";
                row.RefPKVal = GetQueryString("RefPKVal");
                AjaxServiceGener(row, SaveRowAfter, this);
            });
        }

        function SaveRowAfter(data) {
            saveRowCurrent.overCount = saveRowCurrent.overCount + 1;
            if (data.indexOf('err') > -1) {
                alert('保存失败！' + data);
            }
            
            //数据保存完后 刷新页面数据
            if (saveRowCurrent.count == saveRowCurrent.overCount) {
                InitPage();
                if (saveRowCurrent.saveAll) { //保存所有的
                    $('#saveBtn').attr('enable', 'true');
                    $('#saveBtn').css('background', '#4D77A7');
                }//保存1行
                else {
                    var saveRow = $('#dtlDiv div table tbody tr')[saveRowCurrent.rowIndex];
                    var saveBtn = $(saveRow).find('input[value="保存"]');

                    saveBtn.attr('enable', 'true');
                    saveBtn.css('background', '#4D77A7');
                }
                //初始化saveRowCurrent
                saveRowCurrent.count = 0;
                saveRowCurrent.overCount = 0;
                saveRowCurrent.saveAll = false;
                saveRowCurrent.rowIndex = 0;

                $('#Message').html('数据已保存完成');
                $('#dtlDiv').show();
                $('#Message').hide();
                //$('#dg').datagrid('updateRow', { index: updateRowIndex, row: data });

                //$('#dg').datagrid('refreshRow', updateRowIndex);
            }
        }

        function insertRow() {
            
            if ($('#dtlDiv div table tbody tr').length == 1 ) {
                var firstTr = $('#dtlDiv div table tbody tr')[0];
                if ($(firstTr).data().data == undefined) {
                    $('#dtlDiv div table tbody').html('')//无数据时，新增的时候先删除 无记录行
                }
            }
            var insertTr = $('<tr></tr>');
            var threadTh = $('#dtlDiv div table thead tr th');
            var newRowIndex = $('#dtlDiv div table tbody tr').length;
            $.each(threadTh, function (k, threadThObj) {
                if ($(threadThObj).data().colname != undefined) {
                    var o = $(threadThObj);
                    var tmplate = figure_MapAttr_Template(o.data());
                    tmplate.data({ KeyOfEn: o.data().KeyOfEn });
                    tmplate.attr('id', tmplate.attr('name') + "_" + newRowIndex);
                    if (tmplate.attr('name').indexOf('TB_') == 0) {
                        $(tmplate).bind('blur', function (obj) {
                            $(obj.target).parent().parent().data().data[$(obj.target).data().KeyOfEn] =
                                $(obj.target).val();
                        });
                    } else if (tmplate.attr('name').indexOf('DDL_') == 0) {
                        $(tmplate).bind('change', function (obj) {
                            $(obj.target).parent().parent().data().data[$(obj.target).data().KeyOfEn] =
                                $(obj.target).val();
                        });
                    }

                    var td = $('<td></td>')
                    td.append(tmplate);
                    insertTr.append(td);

                } else if ($(threadThObj).data().coltype == 'SN') {
                    insertTr.append($('<td>' + (newRowIndex+1) + '</td>'));
                } else {
                    
                }
            });
            insertTr.append($('<td><input type="button" onclick="deleteRow(this)" value="删除" style=""></td>'));
            //insertTr.append($('<td><input type="button" onclick="saveRow(this)" value="保存" style=""></td>'));
            //直接复制上面的即可

            var trData = { data: {} };
            $.each(workNodeData.Sys_MapAttr, function (k, mapAttr) {
                var defVal = undefined;
                if (workNodeData.MainTable[0][mapAttr.KeyOfEn] == undefined) {
                    defVal = mapAttr.DefVal;
                } else {
                    defVal = workNodeData.MainTable[0][mapAttr.KeyOfEn];
                }
                trData.data[mapAttr.KeyOfEn] = defVal;
            })

            trData.data["OID"] = 0;
            insertTr.data(trData);
            $('#dtlDiv div table tbody').append(insertTr);
            AfterBindEn_DealMapExt(insertTr);
        }

        //初始化数据.
        function InitPage() {
            var ensName = GetQueryString("EnsName");

            var refPKVal = GetQueryString("RefPKVal");
            if (refPKVal == null) {
                alert('错误没有找到关联的主键.');
                return;
            }

            var fid = GetQueryString("FID");
            if (fid == null)
                fid = '0';
            var fk_node = GetQueryString("FK_Node");

            //如何获得全部的参数？ &FK_Node=120&FK_Flow=222 放入到url里面去？

            //初始化表格.
            $.ajax({
                type: 'post',
                async: true,
                url: Handler + "?DoType=Dtl_Init&FK_Node=" + fk_node + "&EnsName=" + ensName + "&RefPKVal=" + refPKVal + "&FID=" + fid + "&m=" + Math.random(),
                dataType: 'html',
                success: function (data) {

                    // 检查是否有错误.
                    if (data.indexOf('err@') == 0) {
                        $("#Msg").html(data);
                        return;
                    }

                    //$("#Msg").html(data);

                    //解析.
                    data = JSON.parse(data);

                    //主表数据，用于变量替换.
                    var mainTable = data["MainTable"]; //主表数据.

                    //从表信息.
                    var sys_MapDtl = data["Sys_MapDtl"]; //从表描述.
                    var sys_mapAttr = data["Sys_MapAttr"]; //从表字段.
                    var sys_mapExtDtl = data["Sys_MapExt"]; //扩展信息.
                    mapExt = sys_mapExtDtl;
                    var dbDtl = data["DBDtl"]; //从表数据.

                    
                    $('#dtlDiv div table tbody').html('');//清空表格数据
                    var sys_mapAttr = data["Sys_MapAttr"];
                    if ($('#dtlDiv div table thead tr').length == 0) {
                        var threadTr = $('<tr data-data="true"></tr>');
                        //制造表头
                        //添加序号列
                        workNodeData = data;
                        var snTh = $('<th data-coltype="SN">序号</th>');
                        threadTr.append(snTh);
                        $.each(sys_mapAttr, function (i, mapAttrObj) {
                            var th = $('<th></th>');
                            th.text(mapAttrObj.Name);
                            th.data(mapAttrObj);
                            th.data().colname = mapAttrObj.KeyOfEn;
                            if (mapAttrObj.UIVisible == 1) {
                                threadTr.append(th);
                            }
                        });

                        //添加删除列
                        var delTh = $('<th></th>');
                        delTh.text("操作");
                        var delThData = {
                            custom: true,
                            customcontent: 1,
                            customcontent1: 'input@type="button" onclick="deleteRow(this)" Value="删除" style=""@',
                            coltype: 'Operation1'
                        };
                        delTh.attr('title', "title");
                        delTh.data(delThData);
                        threadTr.append(delTh);

                        //添加删除列
                        //var delTh = $('<th></th>');
                        //添加保存列
                       /* delTh = $('<th></th>');
                        delTh.text("操作");
                        var delThData = {
                            custom: true,
                            customcontent: 1,
                            customcontent1: 'input@type="button" onclick="saveRow(this)" Value="保存" style=""@',
                            coltype: 'Operation1'
                        };
                        delTh.attr('title', "title");
                        delTh.data(delThData);
                        threadTr.append(delTh);*/

                        $('#dtlDiv div table thead').append(threadTr);
                    }
                    //初始化表数据
                    var dbDtlTmp = { DTObjs: dbDtl };
                    var dtlDataOption = {
                        IsShowAll:true,
                        PageSize: 10,
                        PageIndex: 1,
                        DivId: 'dtlDiv',
                        IsUseLocalData: true,
                        LocalData:JSON.stringify(dbDtlTmp),
                        RenderOverFun: function () {
                            //循环TBODY
                            var tbodyTrs = $('#dtlDiv div table tbody tr');
                            $.each(tbodyTrs, function (m, tbodyTrObj) {
                                var threadTh = $('#dtlDiv div table thead tr th');
                                $.each(threadTh, function (k, threadThObj) {
                                    if ($(threadThObj).data().colname != undefined) {
                                        var o = $(threadThObj);
                                        var tmplate = figure_MapAttr_Template(o.data());
                                        tmplate.data({ KeyOfEn: o.data().KeyOfEn });

                                        //ID 设置为  id+'_1'
                                        var rowIndex = (parseInt($($(tbodyTrObj).find('td')[0]).text()) - 1);
                                        //先写出 NAME   单选扭会出问题
                                        tmplate.attr('id', tmplate.attr('name') + '_'+rowIndex);

                                        var textVal = $($(tbodyTrObj).children('td')[k]).text();
                                        tmplate.val(textVal);
                                        $($(tbodyTrObj).children('td')[k]).text('');
                                        $($(tbodyTrObj).children('td')[k]).append(tmplate);

                                        if (tmplate.attr('name').indexOf('TB_') == 0) {
                                            $(tmplate).bind('blur', function (obj) {
                                                $(obj.target).parent().parent().data().data[$(obj.target).data().KeyOfEn] =
                                                    $(obj.target).val();
                                            });
                                        } else if (tmplate.attr('name').indexOf('DDL_') == 0) {
                                            $(tmplate).bind('change', function (obj) {
                                                $(obj.target).parent().parent().data().data[$(obj.target).data().KeyOfEn] =
                                                    $(obj.target).val();
                                            });
                                        }
                                    }
                                });
                            })

                            //循环TBODY 初始化 SYS_MAPEXT
                            var tbodyTrs1 = $('#dtlDiv div table tbody tr');
                            $.each(tbodyTrs1, function (m, tbodyTrObj) {
                                AfterBindEn_DealMapExt(tbodyTrObj);
                            });
                        }
                    };
                    $('#dtlDiv div table tbody tr').remove();
                    Common.CustomPagePlug(dtlDataOption);//绑定表格
                    return;


                    /********解析数据组装datagrid表*****/
                    /*0 否 1 是*/
                    var IsShowSum = sys_MapDtl[0].IsShowSum == 1 ? true : false; //是否显示合计
                    var IsShowIdx = sys_MapDtl[0].IsShowIdx == 1 ? true : false; //是否显示idx
                    var IsReadonly = sys_MapDtl[0].IsReadonly == 1 ? true : false; //是否只读
                    var IsDelete = sys_MapDtl[0].IsDelete == 1 ? true : false; //是否可以删除
                    var IsInsert = sys_MapDtl[0].IsInsert == 1 ? true : false; //是否可以插入
                    var IsUpdate = sys_MapDtl[0].IsUpdate == 1 ? true : false; //是否可以更新
                    var IsEnablePass = sys_MapDtl[0].IsEnablePass == 1 ? true : false; //是否启用通过
                    var IsHLDtl = sys_MapDtl[0].IsHLDtl == 1 ? true : false; //是否是合流汇总数据
                    var IsFLDtl = sys_MapDtl[0].IsFLDtl == 1 ? true : false; //是否是分流
                    var IsShowTitle = sys_MapDtl[0].IsShowTitle == 1 ? true : false; //是否显示标题
                    var IsView = sys_MapDtl[0].IsView == 1 ? true : false; //是否可见
                    var titles = IsShowTitle ? sys_MapDtl[0].Name : '';

                    //设置表格信息
                    $('#dg').datagrid({
                        //url: '../Test/GetDataFormSql.ashx',
                        //width: 900,//sys_MapDtl[0].FrmW,
                        //height: 500,//sys_MapDtl[0].FrmH,
                        title: '', //titles,
                        rownumbers: IsShowIdx,
                        nowrap: false, //是否单行显示
                        fitColumns: true,
                        showFooter: IsShowSum,
                        fit: true
                    });

                    //列名称数组
                    var cols = new Array();
                    for (var i = 0; i < sys_mapAttr.length; i++) {
                        var clsJson = gridTitle(sys_mapAttr[i], data); //
                        cols.push(clsJson);
                    }
                    //删除按钮
                    if (!IsReadonly && IsDelete) {
                        cols.push({ field: 'operation', title: '操作', width: 100,
                            formatter: function (value, rec, index) {
                                if (isEmpty(rec)) {
                                    return '<a href="#" class="easyui-linkbutton" data-options="plain:true,iconCls:\'icon-remove\'" onclick="deleteRow(' + index + ')">X</a>';
                                }
                                
                                if (rec.operation != 0) {
                                    return '<a href="#" class="easyui-linkbutton" data-options="plain:true,iconCls:\'icon-remove\'" onclick="deleteRow(' + index + ')">删除</a>';
                                }
                            }
                        });
                    }
                    function isEmpty(obj) {
                        for (var name in obj) {
                            return false;
                        }
                        return true;
                    };
                    //新增按钮
                    if (IsReadonly || !IsInsert) {
                        $("#append").hide();
                    }

                    //更新操作
                    if (IsReadonly || !IsUpdate) {//IsReadonly || !IsUpdate
                        //$('#dg').datagrid('disableEditing');
                        //$('#dg').datagrid('disableEditing');
                        isEditable = false;
                    } else {
                        isEditable = true;
                    }

                    //更新列名称
                    $('#dg').datagrid({
                        columns: [cols]
                    });

                    //拼装数据+拼接合计  hjl IsSum = 1
                    footSum(dbDtl);
                    $('#dg').datagrid({
                        onBeginEdit: function (rowIndex) {
                            autoFull(rowIndex);
                        },
                        onAfterEdit: function (rowIndex) {
                            SaveRow(rowIndex);
                        },
                        onClickCell: function (rowIndex, field, value) {
                            fieldMM = field;
                        }
                    });
                }
            });
        }


        //升级表单元素 初始化文本框、日期、时间
        function figure_MapAttr_Template(mapAttr) {
            var eleHtml = '';
            if (mapAttr.UIVisible == 1) {//是否显示

                var str = '';
                var defValue = ConvertDefVal(workNodeData, mapAttr.DefVal, mapAttr.KeyOfEn);

                var isInOneRow = false;//是否占一整行
                var islabelIsInEle = false;//

                eleHtml += '';

                if (mapAttr.UIContralType != 6) {

                    if (mapAttr.LGType == 2) {
                        eleHtml += "<select name='DDL_" + mapAttr.KeyOfEn + "' " + (mapAttr.UIIsEnable ? '' : 'disabled="disabled"') + ">" + InitDDLOperation(workNodeData, mapAttr, defValue) + "</select>";
                    } else {
                        //添加文本框 ，日期控件等
                        //AppString   
                        if (mapAttr.MyDataType == "1" && mapAttr.LGType != "2") {//不是外键
                            if (mapAttr.UIContralType == "1") {//DDL 下拉列表框
                                eleHtml +=
                                    "<select name='DDL_" + mapAttr.KeyOfEn + "' value='" + ConvertDefVal(workNodeData, mapAttr.DefVal, mapAttr.KeyOfEn) + "' " + (mapAttr.UIIsEnable ? '' : ' disabled="disabled"') + ">" +
                                    (workNodeData, mapAttr, defValue) + "</select>";
                            } else {//文本区域
                                if (mapAttr.UIHeight <= 23) {
                                    eleHtml +=
                                        "<input maxlength=" + mapAttr.MaxLen + "  name='TB_" + mapAttr.KeyOfEn + "' type='text' " + (mapAttr.UIIsEnable ? '' : ' disabled="disabled"') + "/>"
                                    ;
                                }
                                else {
                                    eleHtml +=
                                        "<textarea maxlength=" + mapAttr.MaxLen + " style='height:" + mapAttr.UIHeight + "px;' name='TB_" + mapAttr.KeyOfEn + "' type='text' " + (mapAttr.UIIsEnable ? '' : ' disabled="disabled"') + "/>"
                                    ;
                                }
                            }
                        } //AppDate
                        else if (mapAttr.MyDataType == 6) {//AppDate
                            var enableAttr = '';
                            if (mapAttr.UIIsEnable == 1) {
                                enableAttr = 'onfocus="WdatePicker({dateFmt:' + "'yyyy-MM-dd'})" + '";';
                            } else {
                                enableAttr = "disabled='disabled'";
                            }
                            eleHtml += "<input maxlength=" + mapAttr.MaxLen + "  type='text' class='TBcalendar'" + enableAttr + " name='TB_" + mapAttr.KeyOfEn + "'/>";
                        }
                        else if (mapAttr.MyDataType == 7) {// AppDateTime = 7
                            var enableAttr = '';
                            if (mapAttr.UIIsEnable == 1) {
                                enableAttr = 'onfocus="WdatePicker({dateFmt:' + "'yyyy-MM-dd HH:mm'})" + '";';
                                //enableAttr = 'onfocus="WdatePicker({dateFmt:' + "'yyyy-MM-dd'})" + '";';
                            } else {
                                enableAttr = "disabled='disabled'";
                            }
                            eleHtml += "<input maxlength=" + mapAttr.MaxLen / 2 + "  type='text' class='TBcalendar'" + enableAttr + " name='TB_" + mapAttr.KeyOfEn + "' />";
                        }
                        else if (mapAttr.MyDataType == 4) {// AppBoolean = 7
                            if (mapAttr.UIIsEnable == 1) {

                            } else {
                                enableAttr = "disabled='disabled'";
                            }
                            //CHECKBOX 默认值
                            var checkedStr = '';
                            if (checkedStr != "true" && checkedStr != '1') {
                                checkedStr = ' checked="checked" '
                            }
                            checkedStr = ConvertDefVal(workNodeData, '', mapAttr.KeyOfEn);
                            eleHtml += "<div><input " + (defValue == 1 ? "checked='checked'" : "") + " type='checkbox' name='CB_" + mapAttr.KeyOfEn + "' " + checkedStr + "/>";
                            eleHtml += '<label class="labRb" for="CB_' + mapAttr.KeyOfEn + '">' + mapAttr.Name + '</label></div>';
                        }

                        if (mapAttr.MyDataType == 2 && mapAttr.LGType == 1) { //AppInt Enum
                            if (mapAttr.UIContralType == 1) {//DDL
                                eleHtml +=
                                        "<select name='DDL_" + mapAttr.KeyOfEn + "' " + (mapAttr.UIIsEnable ? '' : 'disabled="disabled"') + ">" + InitDDLOperation(workNodeData, mapAttr, defValue) + "</select>";
                            }
                        }

                        // AppDouble  AppFloat  .
                        if (mapAttr.MyDataType == 5 || mapAttr.MyDataType == 3 || (mapAttr.MyDataType == 2 && mapAttr.LGType != 1)) {
                            var enableAttr = '';
                            if (mapAttr.UIIsEnable == 1) {

                            } else {
                                enableAttr = "disabled='disabled'";
                            }
                            eleHtml += "<input style='text-align:right;' onkeyup=" + '"' + "if(isNaN(value))execCommand('undo')" + '"' + " onafterpaste=" + '"' + "if(isNaN(value))execCommand('undo')" + '"' + " maxlength=" + mapAttr.MaxLen / 2 + "   type='text'" + enableAttr + " name='TB_" + mapAttr.KeyOfEn + "'/>";
                        }//"+'"'+"
                       /* if ((mapAttr.MyDataType == 2 && mapAttr.LGType != 1)) {//AppInt
                            var enableAttr = '';
                            if (mapAttr.UIIsEnable == 1) {

                            } else {
                                enableAttr = "disabled='disabled'";
                            }
                            eleHtml += "<input onkeyup=" + '"' + "this.value=this.value.replace(/\D/g,'');" + '"' + "onafterpaste=" + '"' + "this.value=this.value.replace(/\D/g,'');" + '"' + " maxlength=" + mapAttr.MaxLen / 2 + "   type='text'" + enableAttr + " name='TB_" + mapAttr.KeyOfEn + "'/>";
                        }*/


                        //AppMoney  AppRate
                        if (mapAttr.MyDataType == 8) {
                            var enableAttr = '';
                            if (mapAttr.UIIsEnable == 1) {

                            } else {
                                enableAttr = "disabled='disabled'";
                            }
                            eleHtml += "<input style='text-align:right;' onkeyup=" + '"' + "if(isNaN(value))execCommand('undo')" + '"' + " onafterpaste=" + '"' + "if(isNaN(value))execCommand('undo')" + '"' + " maxlength=" + mapAttr.MaxLen / 2 + "   type='text'" + enableAttr + " name='TB_" + mapAttr.KeyOfEn + "'/>";
                        }
                    }
                }

                if (!islabelIsInEle) {
                    eleHtml +=
                   mapAttr.UIIsInput == 1 ? '<span style="color:red" class="mustInput" data-keyofen="' + mapAttr.KeyOfEn + '">*</span>' : "";
                }
            } else {
                var value = ConvertDefVal(workNodeData, mapAttr.DefVal, mapAttr.KeyOfEn);
                if (value == undefined) {
                    value = '';
                } else {
                }
                eleHtml += "<input type='hidden' id='TB_" + mapAttr.KeyOfEn + "'  name='TB_" + mapAttr.KeyOfEn + "'></input>";
            }
            eleHtml = $(eleHtml);
            eleHtml.val(defValue);
            //eleHtml = $('<div>' + eleHtml + '</div>');
            //eleHtml.children(0).css('width', mapAttr.UIWidth).css('height', mapAttr.UIHeight);
            return eleHtml;
        }

     </script>
</head>
<body>
<div id="Msg"></div>
<!--<table id="dg" class="easyui-datagrid" title="" style="width:700px;height:auto"
			data-options="
				iconCls: 'icon-edit',
                rownumbers: true,
				singleSelect: true,
				toolbar: '#tb',
				url: '',
				method: 'get',
				onClickRow: onClickRow,
                onEndEdit: onEndEdit
			">
		<thead>
		</thead>
</table>-->
	<!--<div id="tb" style="height:auto">-->
		<!--<a href="javascript:void(0)" id="append" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="append()">新增</a>
        <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">保存</a>-->
		<!--<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="removeit()">删除行</a>
		<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">保存行</a>
		<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject()">撤销行</a>
		<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="getChanges()">获取改变行</a>-->
	<!--</div>-->


    <!--杨玉慧-->
    <input type="button" value="新增" id="insertBtn" onclick="insertRow()">
    <input type="button" value="保存" id="saveBtn" onclick="saveAllRow()" />
    <div id="">
        <div id="" class="portlet portlet-sortable light bg-inverse" style="padding: 0px; margin: 0px; overflow: auto;">
            <div class="portlet-body " id="" style="overflow: auto;">
                <div class="tab-content" style="margin: 4px 0px;">
                    <div class="tab-pane active portlet_tab flowLists" id="dtlDiv">
                        <div id="" style="min-height: 520px; overflow: auto;">
                            <table class="table wupop" data-data="true">
                                <thead></thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="loadDate" style="text-align: center;">
                            <img src="../Scripts/bootstrap/fonts/loading.gif" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
	
	<script type="text/javascript">
	    var editIndex = undefined;
	    function endEditing() {
	        if (editIndex == undefined) { return true }
	        if ($('#dg').datagrid('validateRow', editIndex)) {
//	            var ed = $('#dg').datagrid('getEditor', { index: editIndex, field: 'productid' });
//	            var productname = $(ed.target).combobox('getText');
//	            $('#dg').datagrid('getRows')[editIndex]['productname'] = productname;
//	            $('#dg').datagrid('endEdit', editIndex);
//	            editIndex = undefined;
	            return true;
	        } else {
	            return false;  
	        }
	    }
	    function onClickRow(index) {
//	        if (editIndex != index) {
//	            if (endEditing()) {
//	                $('#dg').datagrid('selectRow', index)
//							.datagrid('beginEdit', index);
//	                //setEditing(index);//暂时屏蔽，因为在numberbox动态绑定blur、change等事件存在bug，绑定不成功
//	                editIndex = index;
//	            } else {
//	                $('#dg').datagrid('selectRow', editIndex);
//	            }
	        //	        }
	        if (isEditable && (editIndex != index)) {
//	            if (editIndex != undefined) {
//	                SaveRow(editIndex);
//	            } else {
//	                saveFlag = true;
//                }
//	            if (saveFlag) {
//	                $(this).datagrid('endEdit', editIndex);
//	                $(this).datagrid('beginEdit', index);
//	                editIndex = index;
//	            }
	            $(this).datagrid('endEdit', editIndex);
	            $(this).datagrid('beginEdit', index);
	        }
	        editIndex = index;
	    }
	    function append() {
            $('#dg').datagrid('endEdit', editIndex);
	        $('#dg').datagrid('appendRow', {});
	        editIndex = $('#dg').datagrid('getRows').length - 1;
	        $('#dg').datagrid('selectRow', editIndex)
						.datagrid('beginEdit', editIndex);
            
	    }
	    function removeit() {
	        if (editIndex == undefined) { return }
	        $('#dg').datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
	        editIndex = undefined;
	    }
	    function deleteRow(index) {
	        $.messager.confirm('删除确认', '确定要删除吗?', function (r) {
	            if (r) {
	                var rowData = $(index).parent().parent().data().data;
	                if (rowData.OID > 0) {
	                    rowData.DoType = "Dtl_DeleteRow";
	                    rowData.FK_MapDtl = GetQueryString("EnsName");
	                    //row.FK_MapData = "ND101";
	                    rowData.RefPKVal = GetQueryString("RefPKVal");
	                    AjaxServiceGener(rowData, deleteRowAfter, this);
	                }
	            } 
	        });
	    }

	    function deleteRowAfter(data) {
	        if (data.indexOf('err') > -1) {
	            alert('删除失败！');
	        } else {
	            //
	            InitPage();//刷新页面
	            return;
	            if (editIndex == undefined) { return }
	            $('#dg').datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
	            editIndex = undefined;
	        }
        }
        function accept() {
            var rowIndex = $('#dg').datagrid('getRowIndex', $('#dg').datagrid('getSelected'))
            //endEditing();
            //SaveRow(rowIndex);
            $('#dg').datagrid("endEdit", rowIndex);
	    }
	    function reject() {
	        $('#dg').datagrid('rejectChanges');
	        editIndex = undefined;
	    }
	    function getChanges() {
	        var rows = $('#dg').datagrid('getChanges');
	        alert(rows.length + ' rows are changed!');
	    }

	    function onAfterEdit(rowIndex, rowData, changes) {
	        //alert("执行保存");
	        SaveRow(rowIndex);
        }
	    
	    //动态拼接表
	    function gridTitle(obj, datax) {
	        var hid = obj.UIVisible == 1 ? false : true; //1
	        var isread = obj.UIIsEnable == 1 ? false : true;
	        var req = obj.UIIsInput == 1 ? true : false;
	        //是否是合计列
	        if (obj.AtPara.indexOf("IsSum=1") > 0) {
	            hjl.push(obj.KeyOfEn);
            }
	        //拼接之前，查询和划定ext内容
	        /*mapExt解析*/
	        //autoFull
	        var docArrs = [];
	        var AttrOfOper = [];
	        var ddlMap = {};
	        if (mapExt != null && mapExt != undefined && mapExt != '' && mapExt.length != 0) {
	            for (var i = 0; i < mapExt.length; i++) {
	                switch (mapExt[i].ExtType) {
	                    case 'AutoFull':
	                        if (mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
	                            break;
	                        }
	                        //docArrs.push(mapExt[i].Doc);
	                        AttrOfOper.push(mapExt[i].AttrOfOper);
	                        var ofoper = mapExt[i].AttrOfOper;
	                        var doc = mapExt[i].Doc;
	                        doc = doc.replace('单价', 'DanJia').replace('数量', 'ShuLiang');
	                        docArrs.push(doc);
	                        //var docs = doc.replace('*', '').split("@");
	                        //var opts = $('#dg').datagrid('getColumnFields');   // get unfrozen columns
	                    case 'ActiveDDL':
	                        if (mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
	                            break;
	                        }
	                        ddlMap[mapExt[i].AttrOfOper] = mapExt[i].AttrsOfActive + "&" + mapExt[i].Doc
	                }
	            }
	        }
	        //根据数据类型设定组件类型
	        if (obj.UIContralType == 0 ) {//文本
	            switch (obj.MyDataType) {
	                case 1: //文本类型.
	                    if (isread) {
                            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan:1, hidden: hid, align: 'center' };
                        }else{
                            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan:1, editor: { type: 'text', options: {disabled:isread,required:req} }, hidden: hid, align: 'center' };
                        }
	                case 2: //Int 类型.
	                case 3: // float 类型.
	                case 5: // AppDouble
	                case 8: // AppMoney
	                case 9: // 率百分比
	                    var pre = 2;
	                    if (obj.MyDataType == 2) {
	                        pre = 0;
	                    }
	                    var indexArr = [];
	                    for (var k = 0; k < docArrs.length; k++) {
	                        if (docArrs[k].indexOf("@" + obj.KeyOfEn) > -1) {
	                            indexArr.push(k);
	                        }
	                    }
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, editor: { type: 'numberbox', options: { disabled: isread, required: req, precision: pre, formatter: function (value) { if (!value) { return 0.00; } else { return value } } } }, hidden: hid, align: 'center' }; //, onChange: function (newValue, oldValue) { autoFull(newValue, obj.KeyOfEn, indexArr, docArrs, AttrOfOper) }
	                case 6: ////AppDate
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, editor: { type: 'datebox', options: { currentText: '当前', closeText: '关闭', okText: '确定', disabled: isread, required: req,formatter:formatterDate} }, hidden: hid, align: 'center' };
	                case 7: // AppDateTime 类型.
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, editor: { type: 'datetimebox', options: { currentText: '当前', closeText: '关闭', okText: '确定', disabled: isread, required: req, formatter: formatterDateTime} }, hidden: hid, align: 'center' };
	                default:
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, hidden: hid ,align:'center'};
	            }
	        }

	        if (obj.UIContralType == 1 || obj.UIContralType == 3) {  //下拉框UIBindKey
	            comboboxArr.push(obj.KeyOfEn);
	            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: obj.ColSpan, editor: { type: 'combobox', options: { valueField: 'No', textField: 'Name', data: datax[obj.UIBindKey], disabled: isread,
	                onSelect: function (record) {
	                    //更改触发事件
	                    if (ddlMap[obj.KeyOfEn] != null && ddlMap[obj.KeyOfEn] != '' && ddlMap[obj.KeyOfEn] != undefined) {
	                        var docTem = ddlMap[obj.KeyOfEn].replace("~@Key~", "'" + record.No + "'");
	                        var OfActive = docTem.split('&')[0];
	                        docTem = docTem.split('&')[1];
	                        var temx = docTem.split('~');
	                        var rowIndex = $('#dg').datagrid('getRowIndex', $('#dg').datagrid('getSelected'))
	                        for (var m = 0; m < temx.length; m++) {
	                            if (temx[m].indexOf('@') > -1) {
	                                var nax = temx[m].replace('@', '');
	                                var x = $('#dg').datagrid('getEditor', { index: rowIndex, field: nax }).target;
	                                docTem = docTem.replace("~@" + nax + "~", "'" + x.combobox('getValue') + "'");
	                            }
	                        }
	                        var OfActiveEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: OfActive }).target;
	                        //清空被选项
	                        //OfActiveEditor.combobox('setValue', '请选择');
	                        OfActiveEditor.combobox('clear');
                            //重新加载下拉
	                        OfActiveEditor.combobox('reload', Handler + "?DoType=Dtl_ReloadDdl&Doc=" + docTem + "&m=" + Math.random());
	                    }
	                    //更改触发事件
	                }
	            }, required: req
	            }, hidden: hid, align: 'center',
	                formatter: function (value, row) {
	                    return row[obj.KeyOfEn + "Text"];
	                }
	            };
	        }

	        if (obj.UIContralType == 2) { //选择框
	            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: obj.ColSpan, editor: { type: 'checkbox', options: { valueField: 'No', textField: 'Name', data: datax[obj.UIBindKey], disabled: isread }, required: req }, hidden: hid, align: 'center',
	                formatter: function (value, row) {
	                    return row[obj.KeyOfEn + "Text"];
	                }
	            };
	        }

//	        if (obj.UIContralType == 3) { //单选
	        //	            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth,colspan:obj.ColSpan,editor: { type: 'checkbox', options: { on: '1', off: '0'} }, hidden: hid ,align:'center};
//	        }

	        //return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan:obj.ColSpan,hidden: hid };
	    }
        //日期格式化
	    function formatterDate(date) {
	        var y = date.getFullYear();
	        var m = date.getMonth() + 1;
	        var d = date.getDate();
	        return y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d);
	    }
        //时间格式化
        function formatterDateTime(date) {
	        var y = date.getFullYear();
	        var m = date.getMonth() + 1;
	        var d = date.getDate();
            var t = date.getDate();
            var h = date.getHours();
            var i = date.getMinutes();
            var s = date.getSeconds();
	        return y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d) + ' ' + (h < 10 ? '0' + h : h) + ':' + (i < 10 ? '0' + i : i) + ':' + (s < 10 ? '0' + s : s);
	    }
	    //自动计算
	    function autoFull(rowIndex) {
	        /*mapExt解析*/
	        //autoFull
	        if (mapExt == null || mapExt == undefined || mapExt == '' || mapExt.length == 0) {
	            return;
	        }
	        for (var i = 0; i < mapExt.length; i++) {
	            switch (mapExt[i].ExtType) {
	                case 'AutoFull':

	                    if (mapExt[i] == undefined || mapExt[i] == null || mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
	                        break;
	                    }
	                    var ofoper = mapExt[i].AttrOfOper;
	                    var doc = mapExt[i].Doc;
	                    var docs = doc.replace('*', '').replace('+', '').replace('-', '').replace('/', '').replace('^', '').replace('%', '').replace('(', '').replace(')', '').replace('[', '').replace(']', '').replace('{', '').replace('}', '').split("@");
	                    var opts = $('#dg').datagrid('getColumnFields'); // get unfrozen columns
	                    var costEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: ofoper }).target;
	                    for (var i = 0; i < opts.length; i++) {
	                        if ($.inArray(opts[i], docs) > -1) {
	                            var optEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: opts[i] }).target;
	                            optEditor.numberbox({
	                                onChange: function () {
	                                    //获取和替换数值
	                                    var docTem = doc;
	                                    docTem.replace('@' + opts[i], optEditor.numberbox('getValue')); //oldHtml
	                                    //替换其他数值
	                                    for (var m = 0; m < docs.length; m++) {
	                                        if (docs[m] != '' && docs[m] != null) {
	                                            var tem = $('#dg').datagrid('getEditor', { index: rowIndex, field: docs[m] }).target;
	                                            docTem = docTem.replace('@' + docs[m], tem.numberbox('getValue'));
	                                        }
	                                    }
	                                    costEditor.numberbox('setValue', CalculateJS(docTem));
	                                }
	                            });
	                        }
	                    }
	                case 'ActiveDDL':
	                    break;//在拼接时实现
                    default:
	            }
            }
        }
        var docMM = {};
        var fieldMM;
        var opMM = [];
        var acMM = [];

        var docArr = [];
	    function footSum(dbDtl) {
	        var rows = $('#dg').datagrid('getRows')//获取当前的数据行<br>
            var total = 0;
            var zjxx = Array();
            var jsonStr = '{';
            for (var j = 0; j < hjl.length; j++) {
                for (var i = 0; i < rows.length; i++) {;
                    if (rows[i][hjl[j]] != null && rows[i][hjl[j]] != undefined && rows[i][hjl[j]] != 'undefined') {
                        total += Number(rows[i][hjl[j]]);
                    }
                }
                jsonStr += '"' + hjl[j] + '": ' + total + ((j == hjl.length - 1) ? '' : ',');
            }
            if (hjl.length==0) {
                jsonStr += '"operation": 0';
            }else{
                jsonStr += ',"operation": 0';
            }
            jsonStr += '}';
            zjxx.push(JSON.parse(jsonStr));
            $('#dg').datagrid({
                data: { "rows": dbDtl , "footer": zjxx }
            });
        }

        //map_ext汇总 autoFull等
        function setEditing(rowIndex) {
            /*mapExt解析*/
            //autoFull
            if (mapExt == null || mapExt==undefined||mapExt==''||mapExt.length==0){
                 return;
             }
             for (var i=0;i<mapExt.length;i++) {
                 switch (mapExt[i].ExtType) {
                     case 'AutoFull':
                         if (mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
                             break;
                         }
                         var ofoper = mapExt[i].AttrOfOper;
                         var doc = mapExt[i].Doc;
                         var docs = doc.replace('*', '').split("@");
                         var opts = $('#dg').datagrid('getColumnFields'); // get unfrozen columns
                         var costEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: ofoper });
                         for (var i = 0; i < opts.length; i++) {
                             if ($.inArray(opts[i], docs) > -1) {
                                 var optEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: opts[i] });
                                 optEditor.target.bind('change', function () {
                                     //var cost = 123; //priceEditor.target.val() * amountEditor.target.val();
                                     //获取和替换数值
                                     doc.replace('@' + opts[i], optEditor.target.val()); //oldHtml
                                     //替换其他数值
                                     for (var m = 0; m < docs.length; m++) {
                                         var tem = $('#dg').datagrid('getEditor', { index: rowIndex, field: docs[m] });
                                     }
                                     $(costEditor.target).numberbox('setValue', CalculateJS(doc));
                                 });
                             }
                         }
                 }
            }
         }
         //执行运算表达式  lxc提供
         function CalculateJS(sCode) {
             /// <summary>动态运行JS表达式，返回运行结果</summary>
             /// <param name="sCode" type="String">JS表达式字符串</param>
             if (!sCode || sCode.length == 0) {
                 return "";
             }

             if (sCode.indexOf("return ") == -1) {
                 sCode = "return " + sCode;
             }
             
             return new Function(sCode)();
         }

         //循环combobox设置编辑名
         var comboboxArr = [];
         function onEndEdit(index, row) {
             for (var i = 0; i < comboboxArr.length;i++) {
                 var ed = $(this).datagrid('getEditor', {
                     index: index,
                     field: comboboxArr[i]
                 });
                 row[comboboxArr[i]+'Text'] = $(ed.target).combobox('getText');
             }
         }
	</script>

    <script>
    //以下是软通写的
    //初始化网页URL参数
    function initPageParam() {
        //新建独有
        pageData.UserNo = GetQueryString("UserNo");
        pageData.DoWhat = GetQueryString("DoWhat");
        pageData.IsMobile = GetQueryString("IsMobile");

        pageData.FK_Flow = GetQueryString("FK_Flow");
        pageData.FK_Node = GetQueryString("FK_Node");
        //FK_Flow=004&FK_Node=402&FID=0&WorkID=232&IsRead=0&T=20160920223812&Paras=
        pageData.FID = GetQueryString("FID") == null ? 0 : GetQueryString("FID");
        pageData.WorkID = GetQueryString("WorkID");
        pageData.IsRead = GetQueryString("IsRead");
        pageData.T = GetQueryString("T");
        pageData.Paras = GetQueryString("Paras");
        pageData.IsReadOnly = GetQueryString("IsReadOnly");//如果是IsReadOnly，就表示是查看页面，不是处理页面
        pageData.IsStartFlow = GetQueryString("IsStartFlow");//是否是启动流程页面 即发起流程

        pageData.DoType1 = GetQueryString("DoType")//View
        pageData.FK_MapData = GetQueryString("FK_MapData")//View
        pageData.OID = GetQueryString("WorkID") //
        //$('#navIframe').attr('src', 'Admin/CCBPMDesigner/truck/centerTrakNav.html?FK_Flow=' + pageData.FK_Flow + "&FID=" + pageData.FID + "&WorkID=" + pageData.WorkID);
    }
    //将获取过来的URL参数转成URL中的参数形式  &
    function pageParamToUrl() {
        var paramUrlStr = '';
        for (var param in pageData) {
            paramUrlStr += '&' + (param.indexOf('@') == 0 ? param.substring(1) : param) + '=' + pageData[param];
        }
        return paramUrlStr;
    }

    //移交
    //子线程
    //子流程
    //{"IsSuccess":true,"Msg":null,"ErrMsg":null,"List":null,"Data":2}
    function getData(data, url, dataParam) {
        var jsonStr = '{"IsSuccess":true,"Msg":null,"ErrMsg":null,"List":null,"Data":2}';
        var data = JSON.parse(jsonStr);
        if (data.IsSuccess != true) {
            alert('返回参数失败，ErrMsg:' + data.ErrMsg + ";Msg:" + data.Msg + ";url:" + url);

        }
        return data;
    }

    //FK_Flow=005&UserNo=zhwj&DoWhat=StartClassic&=&IsMobile=&FK_Node=501
    var pageData = {};
    var globalVarList = {};
   
    function InitForm() {
        var workNodeData = JSON.parse(jsonStr);
        var CCFormHtml = '';

        //开始解析表单字段
        var mapAttrsHtml = InitMapAttr(workNodeData.Sys_MapAttr, workNodeData);
        $('#divCCForm').html(mapAttrsHtml);

        //设置位置和大小
        $.each(workNodeData.Sys_MapAttr, function (i, obj) {
            var ele = $('[name$=' + obj.KeyOfEn + ']');
            if (ele.length == 1) {
                $(ele).css('left', obj.X);
                $(ele).css('top', obj.Y);
                $(ele).css('position', 'absolute');
                $(ele).css('width', obj.UIWidth);
                $(ele).css('width', obj.UIHeight);
            }
        })

        //为 DISABLED 的 TEXTAREA 加TITLE 
        var disabledTextAreas = $('#divCCForm textarea:disabled');
        $.each(disabledTextAreas, function (i, obj) {
            $(obj).attr('title', $(obj).val());
        })

        //初始化提示信息
        var alertMsgs = workNodeData.AlertMsg;
        if (alertMsgs != undefined && alertMsgs.length > 0) {
            var alertMsgHtml = '';
            $.each(alertMsgs, function (i, alertMsg) {
                alertMsgHtml += "退回标题：" + alertMsg.Title + "退回信息：" + alertMsg.Msg + "</br>";
            });
            $('#Message').html(alertMsgHtml);
        }

        //根据NAME 设置ID的值
        var inputs = $('[name]');
        $.each(inputs, function (i, obj) {
            if ($(obj).attr("id") == undefined || $(obj).attr("id") == '') {
                $(obj).attr("id", $(obj).attr("name"));
            }
        })

        //处理下拉框级联等扩展信息
        AfterBindEn_DealMapExt();

        //设置默认值
        for (var j = 0; j < workNodeData.Sys_MapAttr.length; j++) {
            var mapAttr = workNodeData.Sys_MapAttr[j];
            //添加 label
            //如果是整行的需要添加  style='clear:both'
            var defValue = ConvertDefVal(workNodeData, mapAttr.DefVal, mapAttr.KeyOfEn);
            if ($('#TB_' + mapAttr.KeyOfEn).length == 1) {
                $('#TB_' + mapAttr.KeyOfEn).val(defValue);
            }
        }
    }

    //处理MapExt
    function AfterBindEn_DealMapExt(tr) {
        //var workNode = JSON.parse(jsonStr);
        var  workNode = workNodeData;
        var mapExtArr = workNode.Sys_MapExt;
        for (var i = 0; i < mapExtArr.length; i++) {
            var mapExt = mapExtArr[i];
            switch (mapExt.ExtType) {
                case "PopVal"://PopVal窗返回值
                    var tb = $(tr).find('[name$=' + mapExt.AttrOfOper + ']');
                    //tb.attr("placeholder", "请双击选择。。。");
                    tb.attr("onclick", "ShowHelpDiv('TB_" + mapExt.AttrOfOper + "','','" + mapExt.MyPK + "','" + mapExt.FK_MapData + "','returnvalccformpopval');");
                    tb.attr("ondblclick", "ReturnValCCFormPopValGoogle(this,'" + mapExt.MyPK + "','" + mapExt.FK_MapData + "', " + mapExt.W + "," + mapExt.H + ",'" + GepParaByName("Title", mapExt.AtPara) + "');");

                    tb.attr('readonly', 'true');
                    tb.attr('disabled', 'true');
                    var icon = '';
                    var popWorkModelStr = '';
                    var popWorkModelIndex = mapExt.AtPara != undefined ? mapExt.AtPara.indexOf('@PopValWorkModel=') : -1;
                    if (popWorkModelIndex >= 0) {
                        popWorkModelIndex = popWorkModelIndex + '@PopValWorkModel='.length;
                        popWorkModelStr = mapExt.AtPara.substring(popWorkModelIndex, popWorkModelIndex + 1);
                    }
                    switch (popWorkModelStr) {
                        /// <summary>
                        /// 自定义URL
                        /// </summary>
                        //SelfUrl =1,
                        case "1":
                            icon = "glyphicon glyphicon-th";
                            break;
                            /// <summary>
                            /// 表格模式
                            /// </summary>
                            // TableOnly,
                        case "2":
                            icon = "glyphicon glyphicon-list";
                            break;
                            /// <summary>
                            /// 表格分页模式
                            /// </summary>
                            //TablePage,
                        case "3":
                            icon = "glyphicon glyphicon-list-alt";
                            break;
                            /// <summary>
                            /// 分组模式
                            /// </summary>
                            // Group,
                        case "4":
                            icon = "glyphicon glyphicon-list-alt";
                            break;
                            /// <summary>
                            /// 树展现模式
                            /// </summary>
                            // Tree,
                        case "5":
                            icon = "glyphicon glyphicon-tree-deciduous";
                            break;
                            /// <summary>
                            /// 双实体树
                            /// </summary>
                            // TreeDouble
                        case "6":
                            icon = "glyphicon glyphicon-tree-deciduous";
                            break;
                        default:
                            break;
                    }
                    var eleHtml = ' <div class="input-group form_tree">' + tb.parent().html() +
                    '<span class="input-group-addon" onclick="' + "ReturnValCCFormPopValGoogle('TB_" + mapExt.AttrOfOper + "','" + mapExt.MyPK + "','" + mapExt.FK_MapData + "', " + mapExt.W + "," + mapExt.H + ",'" + GepParaByName("Title", mapExt.AtPara) + "');" + '"><span class="' + icon + '"></span></span></div>';
                    tb.parent().html(eleHtml);
                    break;
                case "RegularExpression"://正则表达式  统一在保存和提交时检查
                    var tb = $(tr).find('[name$=' + mapExt.AttrOfOper + ']');
                    //tb.attr(mapExt.Tag, "CheckRegInput('" + tb.attr('name') + "'," + mapExt.Doc.replace(/【/g, '[').replace(/】/g, ']').replace(/（/g, '(').replace(/）/g, ')').replace(/｛/g, '{').replace(/｝/g, '}') + ",'" + mapExt.Tag1 + "')");

                    if (tb.attr('class') != undefined && tb.attr('class').indexOf('CheckRegInput') > 0) {
                        break;
                    } else {
                        tb.addClass("CheckRegInput");
                        tb.data(mapExt)
                        //tb.data().name = tb.attr('name');
                        //tb.data().Doc = mapExt.Doc;
                        //tb.data().Tag1 = mapExt.Tag1;
                        //tb.attr("data-name", tb.attr('name'));
                        //tb.attr("data-Doc", tb.attr('name'));
                        //tb.attr("data-checkreginput", "CheckRegInput('" + tb.attr('name') + "'," + mapExt.Doc.replace(/【/g, '[').replace(/】/g, ']').replace(/（/g, '(').replace(/）/g, ')').replace(/｛/g, '{').replace(/｝/g, '}') + ",'" + mapExt.Tag1 + "')");
                    }
                    break;
                case "InputCheck"://输入检查
                    //var tbJS = $("#TB_" + mapExt.AttrOfOper);
                    //if (tbJS != undefined) {
                    //    tbJS.attr(mapExt.Tag2, mapExt.Tag1 + "(this)");
                    //}
                    //else {
                    //    tbJS = $("#DDL_" + mapExt.AttrOfOper);
                    //    if (ddl != null)
                    //        ddl.attr(mapExt.Tag2, mapExt.Tag1 + "(this);");
                    //}
                    break;
                case "TBFullCtrl"://自动填充  先不做
                    break;
                    var tbAuto = $(tr).find("#TB_" + mapExt.AttrOfOper);
                    if (tbAuto == null)
                        continue;

                    tbAuto.attr("ondblclick", "ReturnValTBFullCtrl(this,'" + mapExt.MyPK + "');");
                    tbAuto.attr("onkeyup", "DoAnscToFillDiv(this,this.value,\'" + tbAuto.ClientID + "\', \'" + mapExt.MyPK + "\');");
                    tbAuto.attr("AUTOCOMPLETE", "OFF");
                    if (me.Tag != "") {
                        /* 处理下拉框的选择范围的问题 */
                        var strs = mapExt.Tag.split('$');
                        for (var str in strs) {
                            var str = strs[k];
                            if (str = "") {
                                continue;
                            }

                            var myCtl = str.Split(':');
                            var ctlID = myCtl[0];
                            var ddlC1 = $("#DDL_" + ctlID);
                            if (ddlC1 == null) {
                                continue;
                            }

                            //如果文本库数值为空，就让其返回.
                            var txt = tbAuto.val();
                            if (txt == '')
                                continue;

                            //获取要填充 ddll 的SQL.
                            var sql = myCtl[1].Replace("~", "'");
                            sql = sql.Replace("@Key", txt);
                            //sql = BP.WF.Glo.DealExp(sql, en, null);  怎么办

                            //try
                            //{
                            //    dt = DBAccess.RunSQLReturnTable(sql);
                            //}
                            //catch (Exception ex)
                            //{
                            //    this.Clear();
                            //    this.AddFieldSet("配置错误");
                            //    this.Add(me.ToStringAtParas() + "<hr>错误信息:<br>" + ex.Message);
                            //    this.AddFieldSetEnd();
                            //    return;
                            //}

                            //if (dt.Rows.Count != 0)
                            //{
                            //    string valC1 = ddlC1.SelectedItemStringVal;
                            //    foreach (DataRow dr in dt.Rows)
                            //{
                            //        ListItem li = ddlC1.Items.FindByValue(dr[0].ToString());
                            //    if (li == null)
                            //    {
                            //        ddlC1.Items.Add(new ListItem(dr[1].ToString(), dr[0].ToString()));
                            //    }
                            //    else
                            //    {
                            //        li.Attributes["enable"] = "false";
                            //        li.Attributes["display"] = "false";

                            //    }
                            //}
                            //ddlC1.SetSelectItem(valC1);
                        }
                    }

                    break;
                case "ActiveDDL":/*自动初始化ddl的下拉框数据. 下拉框的级联操作 已经 OK*/
                    var ddlPerant =$(tr).find("[name=DDL_" + mapExt.AttrOfOper+']');
                    var ddlChild =$(tr).find("[name=DDL_" + mapExt.AttrsOfActive+']');
                    if (ddlPerant == null || ddlChild == null)
                        continue;
                    var rowIndex = (parseInt($($(tr).find('td')[0]).text()) - 1);
                    ddlPerant.attr("onchange", "DDLAnsc(this.value,\'" + "DDL_" + mapExt.AttrsOfActive +"_"+ rowIndex + "\', \'" + mapExt.MyPK + "\')");
                    // 处理默认选择。
                    //string val = ddlPerant.SelectedItemStringVal;
                    var valClient = ConvertDefVal(workNode, '', mapExt.AttrsOfActive); // ddlChild.SelectedItemStringVal;

                    //ddlChild.select(valClient);  未写
                    break;
                case "AutoFullDLL": // 自动填充下拉框.
                    continue; //已经处理了。
                case "AutoFull"://自动填充  //a+b=c DOC='@DanJia*@ShuLiang'  等待后续优化
                    //循环  KEYOFEN
                    //替换@变量
                    //处理 +-*%
                    if (mapExt.Doc != undefined && mapExt.Doc != '') {
                        if (mapExt.Doc.indexOf('*')) {
                            var mapExtDocArr1 = mapExt.Doc.split('*');
                            for (var m = 0; m < mapExtDocArr1.length; m++) {
                                var extDocObj1 = mapExtDocArr1[m].replace('@', '');
                                //将extDocObj1转换成KeyOfEn
                                var extObjAr = $.grep(workNodeData.Sys_MapAttr, function (val) { return val.Name == extDocObj1; });
                                if (extObjAr.length == 0) {
                                    alert("mapExt:" + mapExt.AttrOfOper + "配置有误");
                                } else {
                                    extDocObj1 = extObjAr[0].KeyOfEn;


                                    $(tr).find('[name=TB_' + mapExt.AttrOfOper + ']').attr('disabled', true);


                                    if ($(tr).find('[name=TB_' + extDocObj1 + ']').length > 0) {
                                        $(tr).find('[name=TB_' + extDocObj1 + ']').data().mapExt = mapExt;
                                        $(tr).find('[name=TB_' + extDocObj1 + ']').bind('blur', function (obj) {
                                            //可能有误
                                            var mapExtDocArr = $(obj.target).data().mapExt.Doc.split('*');
                                            var tmpResult = 1;
                                            for (var m = 0; m < mapExtDocArr.length; m++) {
                                                var extDocObj = mapExtDocArr[m].replace('@', '');
                                                var extObjAr = $.grep(workNodeData.Sys_MapAttr, function (val) { return val.Name == extDocObj; });
                                                if (extObjAr.length == 0) {
                                                    alert("mapExt:" + mapExt.AttrOfOper + "配置有误");
                                                } else {
                                                    extDocObj = extObjAr[0].KeyOfEn;
                                                }
                                                tmpResult = tmpResult * $(tr).find('[name=TB_' + extDocObj + ']').val();
                                            }
                                            $(tr).find('[name=TB_' + $(obj.target).data().mapExt.AttrOfOper + ']').val(tmpResult);

                                            $(obj.target).parent().parent().data().data[$(obj.target).data().mapExt.AttrOfOper] =
                                    tmpResult
                                        })
                                    }
                                }
                            }
                        }
                    }
                    break;
                case "DDLFullCtrl":// 自动填充其他的控件..  先不做
                    break;
                    var ddlOper = $("#DDL_" + mapExt.AttrOfOper);
                    if (ddlOper == null)
                        continue;

                    ddlOper.attr("onchange", "Change('" + workNode.Sys_MapData[0].No + "');DDLFullCtrl(this.value,\'" + "DDL_" + mapExt.AttrOfOper + "\', \'" + mapExt.MyPK + "\')");
                    if (me.Tag != "") {
                        /* 下拉框填充范围. */
                        var strs = me.Tag.split('$');
                        for (var k = 0; k < strs.length; k++) {
                            var str = strs[k];
                            if (str == "")
                                continue;

                            var myCtl = str.split(':');
                            var ctlID = myCtl[0];
                            var ddlC1 = $("#DDL_" + ctlID);
                            if (ddlC1 == null) {
                                //me.Tag = "";
                                //me.Update();
                                continue;
                            }

                            //如果触发的dll 数据为空，则不处理.
                            if (ddlOper.val() == "")
                                continue;

                            var sql = myCtl[1].Replace("~", "'");
                            sql = sql.Replace("@Key", ddlOper.val());

                            //需要执行SQL语句
                            //sql = BP.WF.Glo.DealExp(sql, en, null);

                            //dt = DBAccess.RunSQLReturnTable(sql);
                            //string valC1 = ddlC1.SelectedItemStringVal;
                            //if (dt.Rows.Count != 0)
                            //{
                            //    foreach (DataRow dr in dt.Rows)
                            //{
                            //        ListItem li = ddlC1.Items.FindByValue(dr[0].ToString());
                            //    if (li == null)
                            //    {
                            //        ddlC1.Items.Add(new ListItem(dr[1].ToString(), dr[0].ToString()));
                            //    }
                            //    else
                            //    {
                            //        li.Attributes["visable"] = "false";
                            //    }
                            //}

                            var items = [{ No: 1, Name: '测试1' }, { No: 2, Name: '测试2' }, { No: 3, Name: '测试3' }, { No: 4, Name: '测试4' }, { No: 5, Name: '测试5' }];
                            var operations = '';
                            $.each(items, function (i, item) {
                                operations += "<option  value='" + item.No + "'>" + item.Name + "</option>";
                            });
                            ddlC1.children().remove();
                            ddlC1.html(operations);
                            //ddlC1.SetSelectItem(valC1);
                        }
                    }
                    break;
            }
        }
    }
    //AtPara  @PopValSelectModel=0@PopValFormat=0@PopValWorkModel=0@PopValShowModel=0
    function GepParaByName(name, atPara) {
        var params = atPara.split('@');
        var result = $.grep(params, function (value) {
            return value != '' && value.split('=').length == 2 && value.split('=')[0] == value;
        })
        return result;
    }

    //初始化下拉列表框的OPERATION
    function InitDDLOperation(workNodeData, mapAttr, defVal) {
        var operations = '';
        //外键类型
        if (mapAttr.LGType == 2 || mapAttr.LGType==1) {
            if (workNodeData[mapAttr.KeyOfEn] != undefined) {
                $.each(workNodeData[mapAttr.KeyOfEn], function (i, obj) {
                    operations += "<option " + (obj.No == defVal ? " selected='selected' " : "") + " value='" + obj.No + "'>" + obj.Name + "</option>";
                });
            }
            else if (workNodeData[mapAttr.UIBindKey] != undefined) {
                $.each(workNodeData[mapAttr.UIBindKey], function (i, obj) {
                    operations += "<option " + (obj.No == defVal ? " selected='selected' " : "") + " value='" + obj.No + "'>" + obj.Name + "</option>";
                });
            }
        } else {
            var enums = workNodeData.Sys_Enum;
            enums = $.grep(enums, function (value) {
                return value.EnumKey == mapAttr.UIBindKey;
            });


            $.each(enums, function (i, obj) {
                operations += "<option " + (obj.IntKey == defVal ? " selected='selected' " : "") + " value='" + obj.IntKey + "'>" + obj.Lab + "</option>";
            });

        }
        return operations;
    }

    //填充默认数据
    function ConvertDefVal(workNodeData, defVal, keyOfEn) {

        //计算URL传过来的表单参数@TXB_Title=事件测试
        var pageParams = getQueryString();
        var pageParamObj = {};
        $.each(pageParams, function (i, pageParam) {
            if (pageParam.indexOf('@') == 0) {
                var pageParamArr = pageParam.split('=');
                pageParamObj[pageParamArr[0].substring(1, pageParamArr[0].length)] = pageParamArr[1];
            }
        });

        var result = defVal;

        //通过MAINTABLE返回的参数
        for (var ele in workNodeData.MainTable[0]) {
            if (keyOfEn == ele && workNodeData.MainTable[0] != '') {
                result = workNodeData.MainTable[0][ele];
                break;
            }
        }
        
        //通过URL参数传过来的参数
        for (var pageParam in pageParamObj) {
            if (pageParam == keyOfEn) {
                result = pageParamObj[pageParam];
                break;
            }
        }

        if (result != undefined && typeof (result) == 'string') {
            //result = result.replace(/｛/g, "{").replace(/｝/g, "}").replace(/：/g, ":").replace(/，/g, ",").replace(/【/g, "[").replace(/】/g, "]").replace(/；/g, ";").replace(/~/g, "'").replace(/‘/g, "'").replace(/‘/g, "'");
        }
        return result = unescape(result);
    }

    //获取表单数据
    function getFormData(isCotainTextArea, isCotainUrlParam) {
        var formss = $('#divCCForm').serialize();
        var formArr = formss.split('&');
        var formArrResult = [];
        //获取CHECKBOX的值
        $.each(formArr, function (i, ele) {
            if (ele.split('=')[0].indexOf('CB_') == 0) {
                if ($('#' + ele.split('=')[0] + ':checked').length == 1) {
                    ele = ele.split('=')[0] + '=1';
                } else {
                    ele = ele.split('=')[0] + '=0';
                }
            }
            formArrResult.push(ele);
        });

        //获取表单中禁用的表单元素的值
        var disabledEles = $('#divCCForm :disabled');
        $.each(disabledEles, function (i, disabledEle) {
            var name = $(disabledEle).attr('name');
            switch (disabledEle.tagName.toUpperCase()) {
                case "INPUT":
                    switch (disabledEle.type.toUpperCase()) {
                        case "CHECKBOX"://复选框
                            formArrResult.push(name + '=' + $(disabledEle).is(':checked') ? 1 : 0);
                            break;
                        case "TEXT"://文本框
                            formArrResult.push(name + '=' + $(disabledEle).val());
                            break;
                        case "RADIO"://单选钮
                            var eleResult = name + '=' + $('[name="' + name + ':checked"]').val();
                            if (!$.inArray(formArrResult, eleResult)) {
                                formArrResult.push();
                            }
                            break;
                    }
                    break;
                    //下拉框
                case "SELECT":
                    formArrResult.push(name + '=' + $(disabledEle).children('option:checked').val());
                    break;
                    //文本区域
                case "TEXTAREA":
                    formArrResult.push(name + '=' + $(disabledEle).val());
                    break;
            }
        });

        //获取表单中隐藏的表单元素的值
        var hiddens = $('input[type=hidden]');
        $.each(hiddens, function (i, hidden) {
            if ($(hidden).attr("name").indexOf('TB_') == 0) {
                //formArrResult.push($(hidden).attr("name") + '=' + $(hidden).val());
            }
        });

        if (!isCotainTextArea) {
            formArrResult = $.grep(formArrResult, function (value) {
                return value.split('=').length == 2 ? value.split('=')[1].length <= 50 : true;
            });
        }

        formss = formArrResult.join('&');
        var dataArr = [];
        //加上URL中的参数
        if (pageData != undefined && isCotainUrlParam) {
            var pageDataArr = [];
            for (var data in pageData) {
                pageDataArr.push(data + '=' + pageData[data]);
            }
            dataArr.push(pageDataArr.join('&'));
        }
        if (formss != '')
            dataArr.push(formss);
        var formData = dataArr.join('&');
        return formData;
    }

    //必填项检查   名称最后是*号的必填  如果是选择框，值为'' 或者 显示值为 【*请选择】都算为未填 返回FALSE 检查必填项失败
    function checkBlanks() {
        var checkBlankResult = true;
        //获取所有的列名 找到带* 的LABEL mustInput
        //var lbs = $('[class*=col-md-1] label:contains(*)');
        var lbs = $('.mustInput');
        $.each(lbs, function (i, obj) {
            if ($(obj).parent().css('display') != 'none' && $(obj).parent().next().css('display')) {
                var keyofen = $(obj).data().keyofen
                var ele = $('[id$=_' + keyofen + ']');
                if (ele.length == 1) {
                    switch (ele[0].tagName.toUpperCase()) {
                        case "INPUT":
                            if (ele.attr('type') == "text") {
                                if (ele.val() == "") {
                                    checkBlankResult = false;
                                    ele.addClass('errorInput');
                                } else {
                                    ele.removeClass('errorInput');
                                }
                            }
                            break;
                        case "SELECT":
                            if (ele.val() == "" || ele.children('option:checked').text() == "*请选择") {
                                checkBlankResult = false;
                                ele.addClass('errorInput');
                            } else {
                                ele.removeClass('errorInput');
                            }
                            break;
                        case "TEXTAREA":
                            if (ele.val() == "") {
                                checkBlankResult = false;
                                ele.addClass('errorInput');
                            } else {
                                ele.removeClass('errorInput');
                            }
                            break;
                    }
                }
            }
        });
        return checkBlankResult;
    }

    //正则表达式检查
    function checkReg() {
        var checkRegResult = true;
        var regInputs = $('.CheckRegInput');
        $.each(regInputs, function (i, obj) {
            var name = obj.name;
            var mapExtData = $(obj).data();
            if (mapExtData.Doc != undefined) {
                var regDoc = mapExtData.Doc.replace(/【/g, '[').replace(/】/g, ']').replace(/（/g, '(').replace(/）/g, ')').replace(/｛/g, '{').replace(/｝/g, '}').replace(/，/g, ',');
                var tag1 = mapExtData.Tag1;
                if ($(obj).val() != undefined && $(obj).val() != '') {

                    var result = CheckRegInput(name, regDoc, tag1);
                    if (!result) {
                        $(obj).addClass('errorInput');
                        checkRegResult = false;
                    } else {
                        $(obj).removeClass('errorInput');
                    }
                }
            }
        });
        return checkRegResult;
    }


    //将v1版本表单元素转换为v2 杨玉慧  silverlight 自由表单转化为H5表单
    function GenerWorkNode() {
        $.ajax({
            type: 'post',
            async: true,
            data: pageData,
            //url: "../MyFlow.ashx?DoType=GenerWorkNode&DoType=" + pageData.DoType + "&m=" + Math.random(),
            url: "Handler.ashx?DoType=FrmFree_Init" + "&m=" + Math.random(),
            // url:"Handler.ashx?DoType=FrmFree_Init&FK_MapData="+pageData.FK_MapData + "&m=" + Math.random(),
            dataType: 'html',
            success: function (data) {
                //制造表头  初始化数据

                jsonStr = data;
                var gengerWorkNode = {};
                var flow_Data;
                try {
                    flow_Data = JSON.parse(data);
                    workNodeData = flow_Data;
                }
                catch (err) {
                    alert("GenerWorkNode转换JSON失败:" + jsonStr);
                    return;
                }

                $('#CCForm').html('');
                //循环MapAttr
                for (var mapAtrrIndex in flow_Data.Sys_MapAttr) {
                    var mapAttr = flow_Data.Sys_MapAttr[mapAtrrIndex];
                    var eleHtml = figure_MapAttr_Template(mapAttr);
                    $('#CCForm').append(eleHtml);
                }
                //循环FrmRB
                for (var i in flow_Data.Sys_FrmRB) {
                    var frmLab = flow_Data.Sys_FrmRB[i];
                    var label = figure_Template_Rb(frmLab);
                    $('#CCForm').append(label);
                }

                //根据NAME 设置ID的值
                var inputs = $('[name]');
                $.each(inputs, function (i, obj) {
                    if ($(obj).attr("id") == undefined || $(obj).attr("id") == '') {
                        $(obj).attr("id", $(obj).attr("name"));
                    }
                })

                //处理下拉框级联等扩展信息
                AfterBindEn_DealMapExt();


                //先不处理默认值  20170506
                /*//设置默认值
                for (var j = 0; j < workNodeData.Sys_MapAttr.length; j++) {
                    var mapAttr = workNodeData.Sys_MapAttr[j];
                    //添加 label
                    //如果是整行的需要添加  style='clear:both'


                    var defValue = ConvertDefVal(workNodeData, mapAttr.DefVal, mapAttr.KeyOfEn);
                    if ($('#TB_' + mapAttr.KeyOfEn).length == 1) {
                        $('#TB_' + mapAttr.KeyOfEn).val(defValue);
                    }
                }*/
            }
        })
    }

    var workNodeData = {};

    //初始化单选按钮
    function figure_Template_Rb(frmRb) {
        var eleHtml = '<div></div>';
        eleHtml = $(eleHtml);
        var childRbEle = $('<input id="RB_ChuLiFangShi2" type="radio"/>');
        var childLabEle = $('<label class="labRb"></label>');
        childLabEle.html(frmRb.Lab).attr('for', 'RB_' + frmRb.KeyOfEn + frmRb.IntKey).attr('name', 'RB_' + frmRb.KeyOfEn);

        childRbEle.val(frmRb.IntKey).attr('id', 'RB_' + frmRb.KeyOfEn + frmRb.IntKey).attr('name', 'RB_' + frmRb.KeyOfEn);
        if (frmRb.UIIsEnable == false)
            childRbEle.attr('disabled', 'disabled');
        var defVal = ConvertDefVal(workNodeData, '', frmRb.KeyOfEn);
        if (defVal == frmRb.IntKey) {
            childRbEle.attr("checked", "checked");
        }

        eleHtml.append(childRbEle).append(childLabEle);
        eleHtml.css('position', 'absolute').css('top', frmRb.Y).css('left', frmRb.X);
        return eleHtml;
    }
</script>
</body>
</html>
