<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script type="text/javascript" src="/WF/Scripts/bootstrap/js/jquery.min.js"></script>
    <script language="JavaScript" src="/WF/Comm/JScript.js" type="text/javascript" ></script>
    <script type="text/javascript" src="/WF/Scripts/bootstrap/js/bootstrap.min.js"></script>
    <script src="/WF/Scripts/QueryString.js" type="text/javascript"></script>
    <script src="/WF/Scripts/config.js" type="text/javascript"></script>
     <base target="_self" /> 
    <link href="/WF/Comm/Style/Table0.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="/WF/Scripts/easyUI15/themes/default/easyui.css" />
	<link rel="stylesheet" type="text/css" href="/WF/Scripts/easyUI15/themes/icon.css" />
    <script type="text/javascript" src="/WF/Scripts/easyUI15/jquery.min.js"></script>
	<script type="text/javascript" src="/WF/Scripts/easyUI15/jquery.easyui.min.js"></script>
    <script type="text/javascript" src="/WF/Scripts/easyUI15/locale/easyui-lang-zh_CN.js"></script>
    <script language="javascript" type="text/javascript" >
        var hjl = new Array(); //合计列名称集合
        var mapExt; //mapExt扩展
        var isEditable;
        /* ESC Key Down */
        function Esc() {
            if (event.keyCode == 27)
                window.close();
            return true;
        }

        //页面启动函数.
        $(function () {

            $("#Msg").html("正在加载,请稍后......");

            InitPage();

            $("#Msg").html("");
        });

        //公共方法
        function AjaxServiceGener(param, callback, scope) {
            $.ajax({
                type: "GET", //使用GET或POST方法访问后台
                dataType: "text", //返回json格式的数据
                contentType: "application/json; charset=utf-8",
                url: Handler, //要访问的后台地址
                data: param, //要发送的数据
                async: true,
                cache: false,
                complete: function () { }, //AJAX请求完成时隐藏loading提示
                error: function (XMLHttpRequest, errorThrown) {
                    callback(XMLHttpRequest);
                },
                success: function (msg) {//msg为返回的数据，在这里做数据绑定
                    var data = msg;
                    callback(data, scope);
                }
            });
        }
        var saveFlag = true;
        var updateRowIndex;
        function SaveRow(index) {
            var row = $('#dg').datagrid('getData').rows[Number(index)]; // $('#dg').datagrid('selectRow', { index: rowIndex });
            console.info(row);
            row.DoType = "Dtl_SaveRow";
            row.FK_MapDtl = GetQueryString("EnsName");
            //row.FK_MapData = "ND101";
            row.RefPKVal = GetQueryString("RefPKVal");
            updateRowIndex = index;
            AjaxServiceGener(row, SaveRowAfter, this);
        }

        function SaveRowAfter(data) {
            if (data.indexOf('err') > -1) {
                alert('保存失败！');
                saveFlag = false;
                return;
            }
            $('#dg').datagrid('updateRow', { index: updateRowIndex, row: data });

            //$('#dg').datagrid('refreshRow', updateRowIndex);
            saveFlag = true;
        }



        //初始化数据.
        function InitPage() {

            var ensName = GetQueryString("EnsName");

            var refPKVal = GetQueryString("RefPKVal");
            if (refPKVal == null) {
                alert('错误没有找到关联的主键.');
                return;
            }

            var fid = GetQueryString("FID");
            if (fid == null)
                fid = '0';
            var fk_node = GetQueryString("FK_Node");

            //如何获得全部的参数？ &FK_Node=120&FK_Flow=222 放入到url里面去？

            //初始化表格.
            $.ajax({
                type: 'post',
                async: true,
                url: Handler + "?DoType=Dtl_Init&FK_Node=" + fk_node + "&EnsName=" + ensName + "&RefPKVal=" + refPKVal + "&FID=" + fid + "&m=" + Math.random(),
                dataType: 'html',
                success: function (data) {

                    // 检查是否有错误.
                    if (data.indexOf('err@') == 0) {
                        $("#Msg").html(data);
                        return;
                    }

                    //$("#Msg").html(data);

                    //解析.
                    data = JSON.parse(data);

                    //主表数据，用于变量替换.
                    var mainTable = data["MainTable"]; //主表数据.

                    //从表信息.
                    var sys_MapDtl = data["Sys_MapDtl"]; //从表描述.
                    var sys_mapAttr = data["Sys_MapAttr"]; //从表字段.
                    var sys_mapExtDtl = data["Sys_MapExt"]; //扩展信息.
                    mapExt = sys_mapExtDtl;
                    var dbDtl = data["DBDtl"]; //从表数据.

                    /********解析数据组装datagrid表*****/
                    /*0 否 1 是*/
                    var IsShowSum = sys_MapDtl[0].IsShowSum == 1 ? true : false; //是否显示合计
                    var IsShowIdx = sys_MapDtl[0].IsShowIdx == 1 ? true : false; //是否显示idx
                    var IsReadonly = sys_MapDtl[0].IsReadonly == 1 ? true : false; //是否只读
                    var IsDelete = sys_MapDtl[0].IsDelete == 1 ? true : false; //是否可以删除
                    var IsInsert = sys_MapDtl[0].IsInsert == 1 ? true : false; //是否可以插入
                    var IsUpdate = sys_MapDtl[0].IsUpdate == 1 ? true : false; //是否可以更新
                    var IsEnablePass = sys_MapDtl[0].IsEnablePass == 1 ? true : false; //是否启用通过
                    var IsHLDtl = sys_MapDtl[0].IsHLDtl == 1 ? true : false; //是否是合流汇总数据
                    var IsFLDtl = sys_MapDtl[0].IsFLDtl == 1 ? true : false; //是否是分流
                    var IsShowTitle = sys_MapDtl[0].IsShowTitle == 1 ? true : false; //是否显示标题
                    var IsView = sys_MapDtl[0].IsView == 1 ? true : false; //是否可见
                    var titles = IsShowTitle ? sys_MapDtl[0].Name : '';

                    //设置表格信息
                    $('#dg').datagrid({
                        //url: '../Test/GetDataFormSql.ashx',
                        //width: 900,//sys_MapDtl[0].FrmW,
                        //height: 500,//sys_MapDtl[0].FrmH,
                        title: '', //titles,
                        rownumbers: IsShowIdx,
                        nowrap: false, //是否单行显示
                        fitColumns: true,
                        showFooter: IsShowSum,
                        fit: true
                    });

                    //列名称数组
                    var cols = new Array();
                    for (var i = 0; i < sys_mapAttr.length; i++) {
                        var clsJson = gridTitle(sys_mapAttr[i], data); //
                        cols.push(clsJson);
                    }
                    //删除按钮
                    if (!IsReadonly && IsDelete) {
                        cols.push({ field: 'operation', title: '操作', width: 100,
                            formatter: function (value, rec, index) {
                                if (isEmpty(rec)) {
                                    return '<a href="#" class="easyui-linkbutton" data-options="plain:true,iconCls:\'icon-remove\'" onclick="deleteRow(' + index + ')">X</a>';
                                }
                                
                                if (rec.operation != 0) {
                                    return '<a href="#" class="easyui-linkbutton" data-options="plain:true,iconCls:\'icon-remove\'" onclick="deleteRow(' + index + ')">删除</a>';
                                }
                            }
                        });
                    }
                    function isEmpty(obj) {
                        for (var name in obj) {
                            return false;
                        }
                        return true;
                    };
                    //新增按钮
                    if (IsReadonly || !IsInsert) {
                        $("#append").hide();
                    }

                    //更新操作
                    if (IsReadonly || !IsUpdate) {//IsReadonly || !IsUpdate
                        //$('#dg').datagrid('disableEditing');
                        //$('#dg').datagrid('disableEditing');
                        isEditable = false;
                    } else {
                        isEditable = true;
                    }

                    //更新列名称
                    $('#dg').datagrid({
                        columns: [cols]
                    });

                    //拼装数据+拼接合计  hjl IsSum = 1
                    footSum(dbDtl);
                    $('#dg').datagrid({
                        onBeginEdit: function (rowIndex) {
                            autoFull(rowIndex);
                        },
                        onAfterEdit: function (rowIndex) {
                            SaveRow(rowIndex);
                        },
                        onClickCell: function (rowIndex, field, value) {
                            fieldMM = field;
                        }
                    });
                }
            });
        }
     </script>
</head>
<body>
<div id="Msg"></div>
<table id="dg" class="easyui-datagrid" title="" style="width:700px;height:auto"
			data-options="
				iconCls: 'icon-edit',
                rownumbers: true,
				singleSelect: true,
				toolbar: '#tb',
				url: '',
				method: 'get',
				onClickRow: onClickRow,
                onEndEdit: onEndEdit
			">
		<thead>
		</thead>
</table>

	<div id="tb" style="height:auto">
		<a href="javascript:void(0)" id="append" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="append()">新增</a>
        <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">保存</a>
		<!--<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="removeit()">删除行</a>
		<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">保存行</a>
		<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject()">撤销行</a>
		<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="getChanges()">获取改变行</a>-->
	</div>
	
	<script type="text/javascript">
	    var editIndex = undefined;
	    function endEditing() {
	        if (editIndex == undefined) { return true }
	        if ($('#dg').datagrid('validateRow', editIndex)) {
//	            var ed = $('#dg').datagrid('getEditor', { index: editIndex, field: 'productid' });
//	            var productname = $(ed.target).combobox('getText');
//	            $('#dg').datagrid('getRows')[editIndex]['productname'] = productname;
//	            $('#dg').datagrid('endEdit', editIndex);
//	            editIndex = undefined;
	            return true;
	        } else {
	            return false;
	        }
	    }
	    function onClickRow(index) {
//	        if (editIndex != index) {
//	            if (endEditing()) {
//	                $('#dg').datagrid('selectRow', index)
//							.datagrid('beginEdit', index);
//	                //setEditing(index);//暂时屏蔽，因为在numberbox动态绑定blur、change等事件存在bug，绑定不成功
//	                editIndex = index;
//	            } else {
//	                $('#dg').datagrid('selectRow', editIndex);
//	            }
	        //	        }
	        if (isEditable && (editIndex != index)) {
//	            if (editIndex != undefined) {
//	                SaveRow(editIndex);
//	            } else {
//	                saveFlag = true;
//                }
//	            if (saveFlag) {
//	                $(this).datagrid('endEdit', editIndex);
//	                $(this).datagrid('beginEdit', index);
//	                editIndex = index;
//	            }
	            $(this).datagrid('endEdit', editIndex);
	            $(this).datagrid('beginEdit', index);
	        }
	        editIndex = index;
	    }
	    function append() {
            $('#dg').datagrid('endEdit', editIndex);
	        $('#dg').datagrid('appendRow', {});
	        editIndex = $('#dg').datagrid('getRows').length - 1;
	        $('#dg').datagrid('selectRow', editIndex)
						.datagrid('beginEdit', editIndex);
            
	    }
	    function removeit() {
	        if (editIndex == undefined) { return }
	        $('#dg').datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
	        editIndex = undefined;
	    }
	    function deleteRow(index) {
	        $.messager.confirm('删除确认', '确定要删除吗?', function (r) {
	            if (r) {
	                var row = $('#dg').datagrid('getData').rows[index];
	                if (row.OID > 0) {//删除操作
	                    row.DoType = "Dtl_DeleteRow";
	                    row.FK_MapDtl = GetQueryString("EnsName");
	                    //row.FK_MapData = "ND101";
	                    row.RefPKVal = GetQueryString("RefPKVal");
	                    AjaxServiceGener(row, deleteRowAfter, this);
	                } else {
	                    if (editIndex == undefined) { return }
	                    $('#dg').datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
	                    editIndex = undefined;
	                }
	            } 
	        });
	    }
	    function deleteRowAfter(data) {
	        if (data.indexOf('err') > -1) {
	            alert('删除失败！');
	        } else {
	            if (editIndex == undefined) { return }
	            $('#dg').datagrid('cancelEdit', editIndex)
					.datagrid('deleteRow', editIndex);
	            editIndex = undefined;
	        }
        }
        function accept() {
            var rowIndex = $('#dg').datagrid('getRowIndex', $('#dg').datagrid('getSelected'))
            //endEditing();
            //SaveRow(rowIndex);
            $('#dg').datagrid("endEdit", rowIndex);
	    }
	    function reject() {
	        $('#dg').datagrid('rejectChanges');
	        editIndex = undefined;
	    }
	    function getChanges() {
	        var rows = $('#dg').datagrid('getChanges');
	        alert(rows.length + ' rows are changed!');
	    }

	    function onAfterEdit(rowIndex, rowData, changes) {
	        //alert("执行保存");
	        SaveRow(rowIndex);
        }
	    
	    //动态拼接表
	    function gridTitle(obj, datax) {
	        var hid = obj.UIVisible == 1 ? false : true; //1
	        var isread = obj.UIIsEnable == 1 ? false : true;
	        var req = obj.UIIsInput == 1 ? true : false;
	        //是否是合计列
	        if (obj.AtPara.indexOf("IsSum=1") > 0) {
	            hjl.push(obj.KeyOfEn);
            }
	        //拼接之前，查询和划定ext内容
	        /*mapExt解析*/
	        //autoFull
	        var docArrs = [];
	        var AttrOfOper = [];
	        var ddlMap = {};
	        if (mapExt != null && mapExt != undefined && mapExt != '' && mapExt.length != 0) {
	            for (var i = 0; i < mapExt.length; i++) {
	                switch (mapExt[i].ExtType) {
	                    case 'AutoFull':
	                        if (mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
	                            break;
	                        }
	                        //docArrs.push(mapExt[i].Doc);
	                        AttrOfOper.push(mapExt[i].AttrOfOper);
	                        var ofoper = mapExt[i].AttrOfOper;
	                        var doc = mapExt[i].Doc;
	                        doc = doc.replace('单价', 'DanJia').replace('数量', 'ShuLiang');
	                        docArrs.push(doc);
	                        //var docs = doc.replace('*', '').split("@");
	                        //var opts = $('#dg').datagrid('getColumnFields');   // get unfrozen columns
	                    case 'ActiveDDL':
	                        if (mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
	                            break;
	                        }
	                        ddlMap[mapExt[i].AttrOfOper] = mapExt[i].AttrsOfActive + "&" + mapExt[i].Doc
	                }
	            }
	        }
	        //根据数据类型设定组件类型
	        if (obj.UIContralType == 0 ) {//文本
	            switch (obj.MyDataType) {
	                case 1: //文本类型.
	                    if (isread) {
                            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan:1, hidden: hid, align: 'center' };
                        }else{
                            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan:1, editor: { type: 'text', options: {disabled:isread,required:req} }, hidden: hid, align: 'center' };
                        }
	                case 2: //Int 类型.
	                case 3: // float 类型.
	                case 5: // AppDouble
	                case 8: // AppMoney
	                case 9: // 率百分比
	                    var pre = 2;
	                    if (obj.MyDataType == 2) {
	                        pre = 0;
	                    }
	                    var indexArr = [];
	                    for (var k = 0; k < docArrs.length; k++) {
	                        if (docArrs[k].indexOf("@" + obj.KeyOfEn) > -1) {
	                            indexArr.push(k);
	                        }
	                    }
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, editor: { type: 'numberbox', options: { disabled: isread, required: req, precision: pre, formatter: function (value) { if (!value) { return 0.00; } else { return value } } } }, hidden: hid, align: 'center' }; //, onChange: function (newValue, oldValue) { autoFull(newValue, obj.KeyOfEn, indexArr, docArrs, AttrOfOper) }
	                case 6: ////AppDate
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, editor: { type: 'datebox', options: { currentText: '当前', closeText: '关闭', okText: '确定', disabled: isread, required: req,formatter:formatterDate} }, hidden: hid, align: 'center' };
	                case 7: // AppDateTime 类型.
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, editor: { type: 'datetimebox', options: { currentText: '当前', closeText: '关闭', okText: '确定', disabled: isread, required: req, formatter: formatterDateTime} }, hidden: hid, align: 'center' };
	                default:
	                    return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: 1, hidden: hid ,align:'center'};
	            }
	        }

	        if (obj.UIContralType == 1 || obj.UIContralType == 3) {  //下拉框UIBindKey
	            comboboxArr.push(obj.KeyOfEn);
	            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: obj.ColSpan, editor: { type: 'combobox', options: { valueField: 'No', textField: 'Name', data: datax[obj.UIBindKey], disabled: isread,
	                onSelect: function (record) {
	                    //更改触发事件
	                    if (ddlMap[obj.KeyOfEn] != null && ddlMap[obj.KeyOfEn] != '' && ddlMap[obj.KeyOfEn] != undefined) {
	                        var docTem = ddlMap[obj.KeyOfEn].replace("~@Key~", "'" + record.No + "'");
	                        var OfActive = docTem.split('&')[0];
	                        docTem = docTem.split('&')[1];
	                        var temx = docTem.split('~');
	                        var rowIndex = $('#dg').datagrid('getRowIndex', $('#dg').datagrid('getSelected'))
	                        for (var m = 0; m < temx.length; m++) {
	                            if (temx[m].indexOf('@') > -1) {
	                                var nax = temx[m].replace('@', '');
	                                var x = $('#dg').datagrid('getEditor', { index: rowIndex, field: nax }).target;
	                                docTem = docTem.replace("~@" + nax + "~", "'" + x.combobox('getValue') + "'");
	                            }
	                        }
	                        var OfActiveEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: OfActive }).target;
	                        //清空被选项
	                        //OfActiveEditor.combobox('setValue', '请选择');
	                        OfActiveEditor.combobox('clear');
                            //重新加载下拉
	                        OfActiveEditor.combobox('reload', Handler + "?DoType=Dtl_ReloadDdl&Doc=" + docTem + "&m=" + Math.random());
	                    }
	                    //更改触发事件
	                }
	            }, required: req
	            }, hidden: hid, align: 'center',
	                formatter: function (value, row) {
	                    return row[obj.KeyOfEn + "Text"];
	                }
	            };
	        }

	        if (obj.UIContralType == 2) { //选择框
	            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan: obj.ColSpan, editor: { type: 'checkbox', options: { valueField: 'No', textField: 'Name', data: datax[obj.UIBindKey], disabled: isread }, required: req }, hidden: hid, align: 'center',
	                formatter: function (value, row) {
	                    return row[obj.KeyOfEn + "Text"];
	                }
	            };
	        }

//	        if (obj.UIContralType == 3) { //单选
	        //	            return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth,colspan:obj.ColSpan,editor: { type: 'checkbox', options: { on: '1', off: '0'} }, hidden: hid ,align:'center};
//	        }

	        //return { field: obj.KeyOfEn, title: obj.Name, width: obj.UIWidth, colspan:obj.ColSpan,hidden: hid };
	    }
        //日期格式化
	    function formatterDate(date) {
	        var y = date.getFullYear();
	        var m = date.getMonth() + 1;
	        var d = date.getDate();
	        return y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d);
	    }
        //时间格式化
        function formatterDateTime(date) {
	        var y = date.getFullYear();
	        var m = date.getMonth() + 1;
	        var d = date.getDate();
            var t = date.getDate();
            var h = date.getHours();
            var i = date.getMinutes();
            var s = date.getSeconds();
	        return y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d) + ' ' + (h < 10 ? '0' + h : h) + ':' + (i < 10 ? '0' + i : i) + ':' + (s < 10 ? '0' + s : s);
	    }
	    //自动计算
	    function autoFull(rowIndex) {
	        /*mapExt解析*/
	        //autoFull
	        if (mapExt == null || mapExt == undefined || mapExt == '' || mapExt.length == 0) {
	            return;
	        }
	        for (var i = 0; i < mapExt.length; i++) {
	            switch (mapExt[i].ExtType) {
	                case 'AutoFull':

	                    if (mapExt[i] == undefined || mapExt[i] == null || mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
	                        break;
	                    }
	                    var ofoper = mapExt[i].AttrOfOper;
	                    var doc = mapExt[i].Doc;
	                    var docs = doc.replace('*', '').replace('+', '').replace('-', '').replace('/', '').replace('^', '').replace('%', '').replace('(', '').replace(')', '').replace('[', '').replace(']', '').replace('{', '').replace('}', '').split("@");
	                    var opts = $('#dg').datagrid('getColumnFields'); // get unfrozen columns
	                    var costEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: ofoper }).target;
	                    for (var i = 0; i < opts.length; i++) {
	                        if ($.inArray(opts[i], docs) > -1) {
	                            var optEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: opts[i] }).target;
	                            optEditor.numberbox({
	                                onChange: function () {
	                                    //获取和替换数值
	                                    var docTem = doc;
	                                    docTem.replace('@' + opts[i], optEditor.numberbox('getValue')); //oldHtml
	                                    //替换其他数值
	                                    for (var m = 0; m < docs.length; m++) {
	                                        if (docs[m] != '' && docs[m] != null) {
	                                            var tem = $('#dg').datagrid('getEditor', { index: rowIndex, field: docs[m] }).target;
	                                            docTem = docTem.replace('@' + docs[m], tem.numberbox('getValue'));
	                                        }
	                                    }
	                                    costEditor.numberbox('setValue', CalculateJS(docTem));
	                                }
	                            });
	                        }
	                    }
	                case 'ActiveDDL':
	                    break;//在拼接时实现
                    default:
	            }
            }
        }
        var docMM = {};
        var fieldMM;
        var opMM = [];
        var acMM = [];

        var docArr = [];
	    function footSum(dbDtl) {
	        var rows = $('#dg').datagrid('getRows')//获取当前的数据行<br>
            var total = 0;
            var zjxx = Array();
            var jsonStr = '{';
            for (var j = 0; j < hjl.length; j++) {
                for (var i = 0; i < rows.length; i++) {;
                    if (rows[i][hjl[j]] != null && rows[i][hjl[j]] != undefined && rows[i][hjl[j]] != 'undefined') {
                        total += Number(rows[i][hjl[j]]);
                    }
                }
                jsonStr += '"' + hjl[j] + '": ' + total + ((j == hjl.length - 1) ? '' : ',');
            }
            if (hjl.length==0) {
                jsonStr += '"operation": 0';
            }else{
                jsonStr += ',"operation": 0';
            }
            jsonStr += '}';
            zjxx.push(JSON.parse(jsonStr));
            $('#dg').datagrid({
                data: { "rows": dbDtl , "footer": zjxx }
            });
        }

        //map_ext汇总 autoFull等
        function setEditing(rowIndex) {
            /*mapExt解析*/
            //autoFull
            if (mapExt == null || mapExt==undefined||mapExt==''||mapExt.length==0){
                 return;
             }
             for (var i=0;i<mapExt.length;i++) {
                 switch (mapExt[i].ExtType) {
                     case 'AutoFull':
                         if (mapExt[i].Doc == null || mapExt[i].Doc == undefined || mapExt[i].Doc == '') {
                             break;
                         }
                         var ofoper = mapExt[i].AttrOfOper;
                         var doc = mapExt[i].Doc;
                         var docs = doc.replace('*', '').split("@");
                         var opts = $('#dg').datagrid('getColumnFields'); // get unfrozen columns
                         var costEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: ofoper });
                         for (var i = 0; i < opts.length; i++) {
                             if ($.inArray(opts[i], docs) > -1) {
                                 var optEditor = $('#dg').datagrid('getEditor', { index: rowIndex, field: opts[i] });
                                 optEditor.target.bind('change', function () {
                                     //var cost = 123; //priceEditor.target.val() * amountEditor.target.val();
                                     //获取和替换数值
                                     doc.replace('@' + opts[i], optEditor.target.val()); //oldHtml
                                     //替换其他数值
                                     for (var m = 0; m < docs.length; m++) {
                                         var tem = $('#dg').datagrid('getEditor', { index: rowIndex, field: docs[m] });
                                     }
                                     $(costEditor.target).numberbox('setValue', CalculateJS(doc));
                                 });
                             }
                         }
                 }
            }
         }
         //执行运算表达式  lxc提供
         function CalculateJS(sCode) {
             /// <summary>动态运行JS表达式，返回运行结果</summary>
             /// <param name="sCode" type="String">JS表达式字符串</param>
             if (!sCode || sCode.length == 0) {
                 return "";
             }

             if (sCode.indexOf("return ") == -1) {
                 sCode = "return " + sCode;
             }
             
             return new Function(sCode)();
         }

         //循环combobox设置编辑名
         var comboboxArr = [];
         function onEndEdit(index, row) {
             for (var i = 0; i < comboboxArr.length;i++) {
                 var ed = $(this).datagrid('getEditor', {
                     index: index,
                     field: comboboxArr[i]
                 });
                 row[comboboxArr[i]+'Text'] = $(ed.target).combobox('getText');
             }
         }
	</script>
</body>
</html>
