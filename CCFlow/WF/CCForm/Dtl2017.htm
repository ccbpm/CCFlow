<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>从表</title>
    <meta charset="UTF-8" />
    <base target="_self" />

    <link href="../../DataUser/Style/Dtl.css" rel="stylesheet" type="text/css" />

    <!--通用JS的引用-->
    <script src="../Scripts/jquery-1.11.0.min.js" type="text/javascript"></script>
    <script src="../Comm/JScript.js" type="text/javascript" language="JavaScript"></script>
    <script src="../Scripts/QueryString.js" type="text/javascript"></script>
    <script src="../Scripts/config.js" type="text/javascript"></script>
    <script src="../Comm/Gener.js" type="text/javascript"></script>

    <!-- layui -->
    <link href="../Scripts/layui/layui/css/layui.css" rel="stylesheet" />
    <link href="../Scripts/layui/style/admin.css" rel="stylesheet" />
    <link href="../Scripts/layui/layui/css/autocomplete.css" rel="stylesheet" />
    <script src="../Scripts/layui/layui/layui.js" type="text/javascript"></script>
    <script src="../Scripts/layui/LayuiDialog.js" type="text/javascript"></script>

   <link href="../Scripts/bootstrap/bootstrap-table/src/bootstrap-table.css" rel="stylesheet" />
    <script type="text/javascript" src="../Scripts/bootstrap/js/bootstrap.min.js"></script>
    <script src="../Scripts/bootstrap/bootstrap-table/src/bootstrap-table.js"></script>
    <script type="text/javascript" src="../Scripts/bootstrap/BootstrapUIDialog.js"></script>
    <link href="../Scripts/bootstrap/css/bootstrap.css" rel="stylesheet" />
    <!-- <script src="../Scripts/jquery.easyui.min.js" type="text/javascript"></script>-->
    <!--记录Dtl增删改查，编辑的JS-->
    <script src="Dtl2017.js" type="text/javascript"></script>
    <!--从表初始化数据,从表字段解析的数据-->
    <script src="DtlAttr.js" type="text/javascript"></script>


    <!--从表字段扩展属性的记录-->
    <!--<script src="DtlMapExt.js" type="text/javascript"></script>-->

    <script type="text/javascript" src="../Scripts/commonYangYH.js"></script>
    <script type="text/javascript" src="MapExt2019.js"></script>
    <!--begin Pop弹出框、小范围多选-->
    <!--<script src="JS/Pop.js"></script>
    <script src="../CCForm/JS/MultipleChoiceSearch.js" type="text/javascript"></script>
    <script src="../CCForm/JS/MultipleChoiceSmall.js" type="text/javascript"></script>
    <link href="../CCForm/JS/mselector.css" rel="stylesheet" type="text/css" />
    <script src="../CCForm/JS/mselector.js" type="text/javascript"></script>
    <script src="../CCForm/JS/mtags.js" type="text/javascript"></script>-->
    <!--End Pop弹出框、小范围多选-->

    <!--<script src="../Comm/JS/TBHelpDiv.js" type="text/javascript"></script>-->

    <script src="../Comm/JS/Calendar/WdatePicker.js" type="text/javascript"></script>
    <!--<link href="../Comm/JS/Calendar/My97DatePicker.htm" rel="stylesheet" type="text/css" />-->

    <link href="../Scripts/bootstrap/css/font-awesome.css" rel="stylesheet" type="text/css" />


    <script src="../Data/JSLibData/CovertMoneyToDaXie.js" type="text/javascript"></script>

    <!--二次开发调用的JS-->
    <script src="../../DataUser/JSLibData/CCFormRef.js" type="text/javascript"></script>
    <script src="../../DataUser/SFTable.js" type="text/javascript"></script>

    <style>
        th, td {
            white-space: normal;
        }
        .table > tbody > tr > td{padding:0px 1px;}
        .pagination-detail {
            color: black !important;
        }
        input[type=text] {
            height: 38px;
            line-height: 1.3;
            line-height: 38px\9;
            border-width: 0px;
            border-style: solid;
            background-color: #fff;
            border-radius: 2px;
            width:100% !important
        }
        input[type=text]:focus{
            background:#eee;
            border:1px solid #ccc
        }
    </style>

    <script language="javascript" type="text/javascript">

        var hjl = new Array(); //合计列名称集合
        var mapExts;  //mapExts扩展
        var isEditable;
        var ensName = GetQueryString("EnsName");
        var isShowFull = GetQueryString("IsShowFull");
        isShowFull = isShowFull == null || isShowFull == undefined || isShowFull == "" ? "0 " : isShowFull;

        //页面数据
        var pageData = {
            DBDtl: [{ OID: 0, RowData: {} }],
            updateRowIndex: -1, //正在更新的列索引
            saveRowCurrent: { count: 0, overCount: 0, saveAll: false, rowIndex: 0 },
            currentRowIndex: -1//如果该值有改变，就表明需要存盘，入库  -1 表示还未做操作  光标所在行
        };

        //页面启动函数.
        $(function () {
            //引用自定义JS
            loadScript("../../DataUser/JSLibData/" + ensName + ".js?t=" + Math.random());
            loadScript("../../DataUser/JSLibData/" + ensName + "_Self.js?t=" + Math.random());
            //初始化页面
            InitPage();
            Skip.addJs("./DtlMapExt.js");
            //扩展列解析
            BindMapExt();
            //自适应高度
            setIframeHeight();

        });

        //绑定mapExt
        function BindMapExt() {
            var tbodyTrs1 = $('#dtlDiv div table tbody tr');
            $.each(tbodyTrs1, function (m, tbodyTrObj) {
                AfterBindEn_DealMapExt(tbodyTrObj, m);
            });
        }

        function OpenLink(index) {
            //获取当前行的数据
            var en = $(index).parent().parent().data().data;
            var linkUrl = sys_MapDtl.LinkUrl;

            if (linkUrl.indexOf("?") == -1)
                linkUrl = linkUrl + "?1=2";
            linkUrl = DealJsonExp(en, linkUrl);
            linkUrl = linkUrl.replace("@WorkID", GetQueryString("RefPKVal"));
            linkUrl = linkUrl.replace("@FK_Node", GetQueryString("FK_Node"));
            linkUrl = linkUrl.replace("@FK_Flow", GetQueryString("FK_Flow"));
            if (linkUrl.indexOf('&OID=') == -1)
                linkUrl += '&OID=' + en.OID;
            if (linkUrl.indexOf('&WorkID=') == -1 && GetQueryString("WorkID") != null)
                linkUrl += '&WorkID=' + GetQueryString("WorkID");

            if (linkUrl.indexOf('&FK_Node=') == -1 && GetQueryString("FK_Node") != null)
                linkUrl += '&FK_Node=' + GetQueryString("FK_Node");

            if (linkUrl.indexOf('&FK_Flow=') == -1 && GetQueryString("FK_Flow") != null)
                linkUrl += '&FK_Flow=' + GetQueryString("FK_Flow");

            if (linkUrl.indexOf('&EnsName=') == -1 && GetQueryString("EnsName") != null)
                linkUrl += '&EnsName=' + GetQueryString("EnsName");

            if (linkUrl.indexOf('&RefPKVal=') == -1 && GetQueryString("RefPKVal") != null)
                linkUrl += '&RefPKVal=' + GetQueryString("RefPKVal");

            if (linkUrl.indexOf('&FK_MapData=') == -1 && GetQueryString("FK_MapData") != null)
                linkUrl += '&FK_MapData=' + GetQueryString("FK_MapData");

            if (sys_MapDtl.LinkTarget == "_self") {
                window.location.href = linkUrl;
                return;
            }

            if (sys_MapDtl.LinkTarget == "_blank") {
                window.open(linkUrl);
                return;
            }

            parent.OpenEasyUiDialogExt(linkUrl, sys_MapDtl.LinkLabel, 800, 500, false);
        }

        //打开附件.
        function OpenDtlAth(index) {
            var dtlOID = $(index).parent().parent().data().data.OID;
            var workID = $(index).parent().parent().data().data.RefPK;
            var IsCloseDialog = false;

            var dtlName = GetQueryString("EnsName");
            var fk_node = GetQueryString("FK_Node");
            var fk_flow = GetQueryString("FK_Flow");
            var FFK_MapData = GetQueryString("FK_MapData");
            var IsReadonly = GetQueryString("IsReadonly");

            var parentUrl = parent.location.href;
            var url = "CCForm/Ath.js?IsBTitle=1&PKVal=" + dtlOID + "&Ath=AthMDtl&FK_MapData=" + GetQueryString("EnsName") + "&FK_FrmAttachment=" + dtlName + "_AthMDtl&WorkID=" + workID + "&FK_Node=" + fk_node + "&FK_Flow=" + fk_flow + "&FFK_MapData=" + FFK_MapData + "&IsReadonly=" + IsReadonly;
            var AthNum = 0;
            var content = parent.document.getElementById("Dtl_" + dtlName).contentWindow;
            if (parentUrl.indexOf("CCForm") != -1) {
                url = "Ath.htm?IsBTitle=1&PKVal=" + dtlOID + "&Ath=AthMDtl&FK_MapData=" + GetQueryString("EnsName") + "&FK_FrmAttachment=" + dtlName + "_AthMDtl&WorkID=" + workID + "&FK_Node=" + fk_node + "&FK_Flow=" + fk_flow + "&FFK_MapData=" + FFK_MapData + "&IsReadonly=" + IsReadonly;
                WinOpen(url);
            } else {
                parent.OpenBootStrapModalByContent(url, "AthTable_Init('" + dtlName + "_AthMDtl','Div_" + dtlName + "_AthMDtl'," + dtlOID + ")", 'Div_' + dtlName + '_AthMDtl', "从表多附件", 800, 500, "icon-property", null, null, null, function () {
                    //关闭窗口事件
                    var rowCurrentIndex = parseInt($($(index).parent().parent().children()[0]).text()) - 1;
                    content.$("#Ath_" + rowCurrentIndex).html(AthNum);
                    content.$("#TB_AthNum_" + rowCurrentIndex).val(AthNum);

                });

                if (IsCloseDialog) {

                }
            }

        }



        function setIframeHeight() {
            var h = $("body").height();
            if ($("body").height() < 260) {
                h = 260;
            }
            if (window.frameElement != null)
                $("#" + window.frameElement.getAttribute("id"), parent.document).height(h + 40);
        }


        //获取多表头字段
        function getMutliField(keyOfEn, multi) {
            var fields = multi.split(";");
            for (var i = 0; i < fields.length; i++) {
                var str = fields[i];
                if (str == "")
                    continue;
                if (str.indexOf(keyOfEn + ",") == -1)
                    continue;
                var strs = str.substring(0, str.length - 1).split(",");
                return strs;
            }
            return "";
        }

        //整合表头
        function getUseHeadTh() {
            var headTrs = $('#dtlDiv div table thead tr');
            var threadTh = $('#dtlDiv div table thead tr th');
            //如果是多表头，需要整合整个th信息
            if (isMulti == true) {
                threadTh = [];
                var firstHeadTh = $(headTrs[0]).find("th");
                var secondHeadTh = $(headTrs[1]).find("th");
                for (var i = 0; i < firstHeadTh.length; i++) {
                    var dataInfo = $(firstHeadTh[i]).attr("data-info");
                    if (dataInfo != null && dataInfo != undefined && dataInfo.indexOf("Multi,") != -1) {
                        $.each(secondHeadTh, function (idx, item) {
                            if (dataInfo.indexOf($(item).attr("data-info") + ",") != -1)
                                threadTh.push(item);
                        });
                    } else {
                        threadTh.push(firstHeadTh[i]);
                    }
                }
            }

            return threadTh;

        }
        //初始化数据.
        var sys_MapDtl; //从表的属性
        var isMulti = false;
        var mapAttrs = [];
        function InitPage() {

            var isReadonly = GetQueryString("IsReadonly");
            var refPKVal = GetQueryString("RefPKVal");
            if (refPKVal == null) {
                alert('@错误没有找到关联的主键.');
                return;
            }

            var fid = GetQueryString("FID");
            if (fid == null)
                fid = '0';
            var fk_node = GetQueryString("FK_Node");


            //调用Gener.js 的方法，处理当前页面传来的参数, 并把参数传入到dtl.htm里面去。
            var urlParam = DearUrlParas();


            //初始化表格.
            var handler = new HttpHandler("BP.WF.HttpHandler.WF_CCForm");
            handler.AddUrlData(urlParam);
            var data = handler.DoMethodReturnString("Dtl_Init");

            // 检查是否有错误.
            if (data.indexOf('err@') == 0) {
                alert(data);
                return;
            }

            //解析.
            data = JSON.parse(data);

            //主表数据，用于变量替换.
            var mainTable = data["MainTable"]; //主表数据.

            //从表信息.
            sys_MapDtl = data["Sys_MapDtl"][0]; //从表描述.
            var sys_mapAttr = data["Sys_MapAttr"]; //从表字段.
            var sys_mapExtDtl = data["Sys_MapExt"]; //扩展信息.
            mapAttrs = sys_mapAttr;
            mapExts = sys_mapExtDtl;
            var dbDtl = data["DBDtl"]; //从表数据.

            var uiBindKeys = data["UIBindKey"];
            if (uiBindKeys.length != 0) {
                //获取外部数据源 handler/JavaScript
                var operdata;
                for (var i = 0; i < uiBindKeys.length; i++) {
                    var sfTable = new Entity("BP.Sys.SFTable", uiBindKeys[i].No);
                    var srcType = sfTable.SrcType;
                    if (srcType != null && srcType != "") {
                        //Handler 获取外部数据源
                        if (srcType == 5) {
                            var selectStatement = sfTable.SelectStatement;
                            if (plant == 'CCFlow')
                                selectStatement = basePath + "/DataUser/SFTableHandler.ashx" + selectStatement;
                            else
                                selectStatement = basePath + "/DataUser/SFTableHandler/" + selectStatement;
                            operdata = DBAccess.RunDBSrc(selectStatement, 1);
                        }
                        //JavaScript获取外部数据源
                        if (srcType == 6) {
                            operdata = DBAccess.RunDBSrc(sfTable.FK_Val, 2);
                        }
                        data[uiBindKeys[i].No] = operdata;
                    }
                }

            }

            $('#dtlDiv div table tbody').html(''); //清空表格数据

            if (sys_MapDtl.ShowCols) {
                var ShowCols = sys_MapDtl.ShowCols.split(",");
                $.each(sys_mapAttr, function (i, o) {
                    if (o.UIVisible == 1 && ShowCols.indexOf(o.KeyOfEn) == -1) {
                        o.UIVisible = 0;
                    }
                });
            }

            // 表头start --------------------
            if ($('#dtlDiv div table thead tr').length == 0) {
                var multi = GetPara(sys_MapDtl.AtPara, "MultiTitle");
                if (multi == null || multi == undefined || multi == "")
                    multi = GetPara(sys_MapDtl.AtPara, "MultiTitle1")
                if (multi != null && multi != undefined && multi != "")
                    isMulti = true;
                var rowspan = "rowspan=1";
                if (isMulti == true)
                    rowspan = "rowspan=2";

                var threadTr = $('<tr data-data="true"></tr>');
                var secondTr = $('<tr data-data="true"></tr>');
                var currentGroup = "";
                //制造表头
                //添加序号列
                workNodeData = data;

                //新增显示方式？ =0行模式, 1=自由表单模式 2=傻瓜表单模式.
                // ==1,==2 是打开父窗口出现卡片.
                var EditModel = sys_MapDtl.EditModel;
                window.EditModel = EditModel;

                var snTh = $('<th data-coltype="SN" ' + rowspan + ' style=\'width:20px;\' ><img src="../Img/Btn/Add.gif" id="insertBtn"  style="cursor: pointer;" name="insertBtn" onclick="insertRow(' + EditModel + ')" /></th>');

                threadTr.append(snTh);
                $.each(sys_mapAttr, function (i, mapAttrObj) {

                    var mustInput = "";
                    if (mapAttrObj.UIIsInput == 1)
                        mustInput = '<span style="color:red" class="mustInput" data-keyofen="' + mapAttrObj.KeyOfEn + '">*</span>';

                    if (isMulti == false || multi.indexOf(mapAttrObj.KeyOfEn + ",") == -1) {
                        var th = $('<th class="thStyle"' + rowspan + '></th>');
                        if (mapAttrObj.MyDataType == 8)
                            th = $('<th data-coltype="Money"' + rowspan + '></th>');


                        th.data(mapAttrObj);

                        if (mapAttrObj.MyDataType == 6)
                            th.css('width', 110);
                        if (mapAttrObj.MyDataType == 7)
                            th.css('width', 127);
                        else
                            th.css('width', mapAttrObj.UIWidth);

                        th.html("<div style='min-width:" + th.css("width") + ";white-space:noraml;'>" + mapAttrObj.Name + "</div>");

                        if (mapAttrObj.UIVisible == 0)
                            th.css("display", "none");
                        th.data().colname = mapAttrObj.KeyOfEn;
                        th.append(mustInput);

                        threadTr.append(th);
                    } else {
                        var fields = getMutliField(mapAttrObj.KeyOfEn, multi);
                        if (fields != "" && (currentGroup == "" || currentGroup != fields[0])) {
                            var info = fields.join(",");
                            info = "Multi," + info.substring(info.indexOf(",") + 1) + ",";
                            var th = $('<th class="thStyle" style="text-align:center" data-info="' + info + '" colspan=' + (fields.length - 1) + '></th>');
                            th.text(fields[0]);
                            threadTr.append(th);
                            currentGroup = fields[0];
                        }
                        var th = $('<th class="thStyle" data-info="' + mapAttrObj.KeyOfEn + '"></th>');
                        if (mapAttrObj.MyDataType == 8)
                            th = $('<th data-coltype="Money" data-info="' + mapAttrObj.KeyOfEn + '"></th>');


                        th.data(mapAttrObj);
                        if (mapAttrObj.MyDataType == 6)
                            th.css('width', 110);
                        if (mapAttrObj.MyDataType == 7)
                            th.css('width', 127);
                        else
                            th.css('width', mapAttrObj.UIWidth);

                        th.html("<div style='min-width:" + th.css("width") + ";white-space:noraml;'>" + mapAttrObj.Name + "</div>");

                        if (mapAttrObj.UIVisible == 0)
                            th.css("display", "none");
                        th.data().colname = mapAttrObj.KeyOfEn;
                        th.append(mustInput);

                        secondTr.append(th);
                    }

                });

                //增加附件.
                var athTh = $('<th style="width:50px;"' + rowspan + '>附件</th>');
                var athThData;
                athThData = {
                    custom: true,
                    customcontent: 1,
                    customcontent1: "a@href='javaScript:void(0);' onclick='OpenDtlAth(this)' style='margin-left:20px' titile=附件 @<i class='fa fa-upload' aria-hidden='true'></i>",
                    coltype: 'Operation1'

                };

                if (sys_MapDtl.IsEnableAthM == 1) {

                    //引入js
                    Skip.addJs(basePath + "/WF/CCForm/Ath.js", parent.document.getElementsByTagName('script')[0]);
                    Skip.addJs(basePath + "/WF/CCForm/JS/FileUpload/fileUpload.js", parent.document.getElementsByTagName('script')[0]);
                    Skip.addJs(basePath + "/WF/Scripts/jquery-form.js", parent.document.getElementsByTagName('script')[0]);
                    Skip.addJs(basePath + "/DataUser/OverrideFiles/Ath.js", parent.document.getElementsByTagName('script')[0]);
                    parent.$('head').append("<link href='" + basePath + "/WF/CCForm/JS/FileUpload/css/fileUpload.css' rel='stylesheet' type='text/css' />");
                    athTh.data(athThData);
                    threadTr.append(athTh);

                }

                //超链接
                if (sys_MapDtl.IsEnableLink == 1) {
                    var linkTh = $('<th style="width:50px;"' + rowspan + '>链接</th>');
                    var target = sys_MapDtl.LinkTarget;
                    var LinkLabel = sys_MapDtl.LinkLabel;
                    var linkThData;
                    linkThData = {
                        custom: true,
                        customcontent: 1,
                        customcontent1: "a@href='javaScript:void(0);' onclick='OpenLink(this)'  titile='链接' @" + LinkLabel,
                        coltype: 'Operation1'

                    };

                    linkTh.data(linkThData);
                    threadTr.append(linkTh);

                }

                //添加删除,保存列
                var delTh = "";
                var impModel = sys_MapDtl.ImpModel;
                var IsExp = sys_MapDtl.IsImp;//导出
                var th = $("<th style='width:120px;white-space: nowrap;'" + rowspan + "></th>");
                var imgStr = "";
                if ((sys_MapDtl.IsDelete == "1" || sys_MapDtl.IsInsert == "1" || sys_MapDtl.IsUpdate == "1") && sys_MapDtl.IsReadonly == "0" && isReadonly != "1")
                    imgStr = '<img title="保存" style="width: 30px;padding: 0px 5px;cursor:pointer;" src="../Img/Btn/Save.gif" onclick="SaveAll();" />';
                if (IsExp == 1) {

                    imgStr += '<img title="导出" style="width: 30px;padding: 0px 5px;cursor:pointer;" src="../Img/Btn/ExportToExcel.gif" onclick="ExpOption();" />';
                }
                if (impModel != 0) {

                    imgStr += '<img title="选项" style="width: 40px;padding: 0px 5px;cursor:pointer;" src="../Img/Btn/Option.gif" onclick="Option(' + impModel + ');" />';
                }
                if (isShowFull != "1")
                    imgStr += '<img title="全屏显示" style="width: 30px;padding: 0px 5px;cursor:pointer;" src="../Img/Full.png" onclick="WindowOpenDtl()" />'
                var delTh = $($(th).append(imgStr));

                var delThData;

                if (sys_MapDtl.IsDelete == "1" || sys_MapDtl.IsInsert == "1") { //有新增或者有删除，就有删除权限
                    delThData = {
                        custom: true,
                        customcontent: 1,
                        customcontent1: 'img@src="../Img/Btn/Delete.png" onclick="deleteRow(this)" class="delRow" titile="删除" style="cursor:pointer;"@',
                        coltype: 'Operation1'
                    };
                    if (sys_MapDtl.EditModel != 0) {
                        delThData.customcontent = 2;
                        delThData.customcontent2 = delThData.customcontent1;
                        delThData.customcontent1 = 'img@src="../Img/Btn/Edit.gif" onclick="updateRow($(this).parent().parent().data().data.OID, ' + sys_MapDtl.EditModel + ')" class="updateRow" titile="修改" style="cursor:pointer;"@';
                    }
                }


                //<td><img src="../Img/Btn/Delete.png"  onclick="deleteRow(this)" /></td>
                //如果能删除，就有删除按钮
                if (sys_MapDtl.IsReadonly == "0" && isReadonly != "1") {
                    delTh.data(delThData);
                }


                //可删除或者可新增时，有操作列
                //if ((sys_MapDtl.IsDelete == "1" || sys_MapDtl.IsInsert == "1" || sys_MapDtl.IsUpdate == "1") && sys_MapDtl.IsReadonly == "0" && isReadonly != "1") {
                threadTr.append(delTh);
                //}

                //添加删除列
                //var delTh = $('<th></th>');
                //添加保存列
                delTh = $('<th style=""' + rowspan + '></th>');
                delTh.text("操作");
                var delThData = {
                    custom: true,
                    customcontent: 1,
                    customcontent1: 'img@src="../Img/Btn/Save.gif" onclick="saveTrRow(this)" titile="保存" style="cursor:pointer;"@',
                    coltype: 'Operation1'
                };
                delTh.attr('title', "title");
                delTh.data(delThData);
                //threadTr.append(delTh);

                $('#dtlDiv div table thead').append(threadTr);
                if (isMulti == true)
                    $('#dtlDiv div table thead').append(secondTr);
            }
            //if (isShowFull != "1")
            //$('#dtlDiv div table thead tr').bind("dblclick", function () {
            //    WindowOpenDtl();
            //});
            // 表头over --------------------

            //如果不能新增，就把新增按钮去掉.
            if (sys_MapDtl.IsInsert == "0" || sys_MapDtl.IsReadonly == "1" || isReadonly == "1") {
                document.getElementById('insertBtn').style.display = 'none';
            }

            //初始化表数据
            var dbDtlTmp = { DTObjs: dbDtl };


            //为PageData.DBDtl 赋值
            $.each(dbDtl, function (i, objRow) {
                pageData.DBDtl.push({ OID: objRow.OID, RowData: objRow });
            });

            var dtlDataOption = {
                IsShowAll: true,
                PageSize: 10,
                PageIndex: 1,
                DivId: 'dtlDiv',
                IsUseLocalData: true,
                LocalData: JSON.stringify(dbDtlTmp),
                RenderOverFun: function () {
                    //循环TBODY
                    var tbodyTrs = $('#dtlDiv div table tbody tr');
                    $.each(tbodyTrs, function (m, tbodyTrObj) {
                        var threadTh = getUseHeadTh();
                        var index = m;
                        $.each(threadTh, function (k, threadThObj) {
                            if ($(threadThObj).data().colname != undefined) {
                                var o = $(threadThObj);
                                var tmplate = figure_MapAttr_Template(o.data());
                                // 1=自由表单模式 2=傻瓜表单模式
                                if (sys_MapDtl.EditModel != 0) {
                                    tmplate.attr("disabled", "disabled");
                                }
                                var rowIndex = (parseInt($($(tbodyTrObj).find('td')[0]).text()) - 1);
                                var mapAttr = o.data();
                                //枚举复选框
                                if (mapAttr.MyDataType == "1" && mapAttr.UIContralType == "2" && mapAttr.LGType == 1) {
                                    $.each(tmplate, function (idx, obj) {
                                        if (obj.nodeName != "LABEL") {
                                            $(obj).attr('name', $(obj).attr('name') + '_' + rowIndex);
                                            $(obj).attr('id', $(obj).attr('id') + '_' + rowIndex);
                                            $(obj).data({ KeyOfEn: o.data().KeyOfEn });
                                        }
                                    });
                                    var ckEles = $.grep(tmplate, function (obj) {
                                        return $(obj).attr('name') == 'CB_' + o.data().KeyOfEn;
                                    });

                                    var textVal = "," + $($(tbodyTrObj).children('td')[k]).text() + ",";
                                    $.each(ckEles, function () {
                                        if (textVal.indexOf("," + $(this).val() + ",") != -1)
                                            $(this).attr("checked", true);
                                        else
                                            $(this).attr("checked", false);
                                    });
                                    $($(tbodyTrObj).children('td')[k]).text('');
                                    $($(tbodyTrObj).children('td')[k]).append(tmplate);
                                    //枚举单选按钮
                                } else if (mapAttr.MyDataType == "2" && mapAttr.UIContralType == "3") {
                                    $.each(tmplate, function (idx, obj) {
                                        if (obj.nodeName != "LABEL") {
                                            $(obj).attr('name', $(obj).attr('name') + '_' + rowIndex);
                                            $(obj).attr('id', $(obj).attr('id') + '_' + rowIndex);
                                            $(obj).data({ KeyOfEn: o.data().KeyOfEn });
                                        }
                                    });

                                    var radioEles = $.grep(tmplate, function (obj) {
                                        return $(obj).attr('name') == 'RB_' + o.data().KeyOfEn;
                                    });

                                    var textVal = $($(tbodyTrObj).children('td')[k]).text();
                                    $.each(radioEles, function () {
                                        if (textVal == $(this).val())
                                            $(this).attr("checked", true);
                                        else
                                            $(this).attr("checked", false);
                                    });
                                    $($(tbodyTrObj).children('td')[k]).text('');
                                    $($(tbodyTrObj).children('td')[k]).append(tmplate);

                                } else {
                                    if (tmplate.length >= 2) {

                                        if (tmplate[1].nodeName == "SPAN") {
                                            $(tmplate[0]).data({ KeyOfEn: o.data().KeyOfEn });

                                            //ID 设置为  id+'_1'
                                            //先写出 NAME   单选扭会出问题
                                            $(tmplate[0]).attr('id', $(tmplate[0]).attr('name') + '_' + rowIndex);
                                        }
                                        if (tmplate[1].nodeName == "INPUT") {
                                            $(tmplate[0]).data({ KeyOfEn: o.data().KeyOfEn + "T" });
                                            $(tmplate[1]).data({ KeyOfEn: o.data().KeyOfEn });
                                        }
                                        $(tmplate[0]).attr('id', $(tmplate[0]).attr('name') + '_' + rowIndex);
                                        $(tmplate[1]).attr('id', $(tmplate[1]).attr('name') + '_' + rowIndex);
                                    } else {
                                        tmplate.data({ KeyOfEn: o.data().KeyOfEn });

                                        //ID 设置为  id+'_1'
                                        var rowIndex = (parseInt($($(tbodyTrObj).find('td')[0]).text()) - 1);
                                        //先写出 NAME   单选扭会出问题
                                        tmplate.attr('id', tmplate.attr('name') + '_' + rowIndex);
                                    }
                                    //处理复选框  设置表格中数据的值
                                    var textVal = $($(tbodyTrObj).children('td')[k]).text();

                                    var ckEle = tmplate.find('[name=CB_' + o.data().KeyOfEn + ']');
                                    if (ckEle.length == 1) {
                                        var ckId = 'CB_' + o.data().KeyOfEn + '_' + rowIndex;
                                        ckEle.attr('id', ckId);
                                        tmplate.find('label').attr('for', ckId);
                                        if (textVal == "1") {
                                            ckEle[0].checked = true;
                                        } else {
                                            ckEle[0].checked = false;
                                        }
                                    }
                                    else {
                                        // 判断下拉框是否有对应option, 若没有则追加
                                        if (o.data().LGType == 2 || o.data().UIContralType == "1") {
                                            if ($("option[value='" + textVal + "']", tmplate).length == 0) {
                                                try {
                                                    var c = workNodeData.DBDtl[index];
                                                    if (c) {
                                                        var text = c[o.data().KeyOfEn + "Text"];
                                                        if (text == "" || text == undefined)
                                                            text = c[o.data().KeyOfEn + "T"];

                                                        tmplate.append("<option value='" + textVal + "'>" + text + "</option>");
                                                    }
                                                } catch (e) {
                                                }
                                            }

                                        }

                                        tmplate.val(textVal);
                                    }
                                    //处理单选按钮。。。 还没做
                                    $($(tbodyTrObj).children('td')[k]).text('');
                                    $($(tbodyTrObj).children('td')[k]).append(tmplate);
                                }



                                if (tmplate.attr('name') != undefined && tmplate.length == 1 && tmplate.attr('name').indexOf('TB_') == 0) {
                                    $(tmplate).bind('blur', function (obj) {
                                        $(obj.target).parent().parent().data().data[$(obj.target).data().KeyOfEn] = $(obj.target).val();
                                    });
                                } else if (tmplate.attr('name') != undefined && tmplate.attr('name').indexOf('DDL_') == 0 || (tmplate.length > 1 && $(tmplate[1]).attr('name') != undefined && $(tmplate[1]).attr('name').indexOf('DDL_') == 0)) {
                                    //对于只读的下拉框做如下处理  为只读的下拉框赋值.


                                    if (o.data().UIIsEnable == "0") {
                                        if ($(tbodyTrObj).data().hasOwnProperty('data')) {//没有数据时会报错,导致发送失败
                                            var ddlValue = $(tbodyTrObj).data().data[o.data().KeyOfEn];
                                            var ddlText = $(tbodyTrObj).data().data[o.data().KeyOfEn + "TEXT"] || $(tbodyTrObj).data().data[o.data().KeyOfEn + "Text"];
                                            if (tmplate.length > 1)
                                                ddlText = $(tbodyTrObj).data().data[o.data().KeyOfEn + "T"];
                                            var option = $('<option select="selected" value="' + ddlValue + '">' + ddlText + '</option>');
                                            if (tmplate.length > 1) {
                                                $(tmplate[1]).children().remove();
                                                $(tmplate[1]).append(option);
                                            } else {
                                                $(tmplate).children().remove();
                                                $(tmplate).append(option);
                                            }
                                        }
                                    } else {
                                        $(tmplate).bind('change', function (obj) {
                                            $(obj.target).parent().parent().data().data[$(obj.target).data().KeyOfEn] = $(obj.target).val();

                                        });
                                    }

                                } else if (tmplate.attr('name') == undefined && tmplate.find('[name^=CB_]').length == 1) {
                                    $(tmplate).find('[name^=CB_]').bind('change', function (obj) {
                                        $(obj.target).parent().parent().parent().data().data[$(obj.target).parent().data().KeyOfEn] = $(tmplate).find('[name^=CB_]')[0].checked == true ? 1 : 0;
                                    });
                                }
                            }
                        });

                    })

                    //如果是只读的，全部设置成只读
                    if (workNodeData.Sys_MapDtl[0].IsReadonly == "1" || isReadonly == "1") {
                        $('#dtlDiv div table tbody tr input[type=text]').attr('disabled', 'disabled');
                        $('#dtlDiv div table tbody tr textarea').attr('disabled', 'disabled');
                        $('#dtlDiv div table tbody tr select').attr('disabled', 'disabled');
                        $('#dtlDiv div table tbody tr input[type=checkbox]').attr('disabled', 'disabled');
                    } else if ((sys_MapDtl.IsDelete == "1" || sys_MapDtl.IsInsert == "1") && sys_MapDtl.EditModel != 0) {
                        tbodyTrs.on("dblclick", function () {
                            updateRow($(this).data().data.OID, lsys_MapDtl.EditModel);
                        });
                    }


                    //mouseleave  鼠标离开行
                    regMouseLeaveTr();
                }
            };

            $('#dtlDiv div table tbody tr').remove();
            Common.CustomPagePlug(dtlDataOption); //绑定表格

            if (typeof sys_MapDtl.ColAutoExp != "undefined" && sys_MapDtl.ColAutoExp != "") {
                window.columnExp = [];
                // 解析统计规则字符串
                $.each(sys_MapDtl.ColAutoExp.split("@"), function (i, e) {
                    if (e.indexOf(":") != -1) {
                        var sp = e.split(":");
                        columnExp.push({
                            "KeyOfEn": sp[0], // 字段
                            "exp": sp[1]		// 表达式
                        });
                    }
                });
            }
            if ($.isArray(dbDtl) && dbDtl.length >= 0) {

                /**
                * 统计行
                * "ColAutoExp":"@ShuLiang:Sum@DanJia:Sum@XiaoJi:Sum"
                */
                if (typeof sys_MapDtl.ColAutoExp != "undefined" && sys_MapDtl.ColAutoExp != "") {
                    addStatisticsRow();
                    bindStatistics();
                }

                var formExt = $("#formExt").val();
                var extObj = null;
                try {
                    if (formExt && formExt != "") {
                        extObj = JSON.parse(formExt);
                    }
                } catch (e) {
                }
                if (extObj) {
                    parentStatistics(extObj);
                }
            }

            //textarea的高度自适应的设置
            var textareas = $("textarea");
            $.each(textareas, function (idex, item) {
                autoTextarea(item);
            });

            $('#Msg').hide();
            setIframeHeight();
            return;

        }


        function triggerStatistics() {
            $.each(getUseHeadTh(), function (i, th) {
                var matchesColumn = [];
                if (window.columnExp) {
                    matchesColumn = $.grep(window.columnExp, function (val) {	// 根据表头的colname与待统计列的KeyOfEn对比
                        return val.KeyOfEn == $(th).data().colname;
                    });
                }
                if (matchesColumn.length == 1) {	// 如果是统计列
                    var o = $(th);
                    var template = figure_MapAttr_Template(o.data()); // 根据该列表头的数据(data)获取到与当前列类型一致的表单元素
                    var name = template.attr("name");
                    $(":input[name=" + name + "]").each(function (i, e) {	// 根据遍历该列所有元素
                        if (i == 0) {
                            $(e).trigger("change"); // 页面初始化后进行合计计算(仅触发合计列第一个元素即可)
                        }
                    });
                }
            });
        }

        function bindStatistics() {
            $.each(getUseHeadTh(), function (i, th) {
                var matchesColumn = $.grep(window.columnExp, function (val) {	// 根据表头的colname与待统计列的KeyOfEn对比
                    return val.KeyOfEn == $(th).data().colname;
                });
                if (matchesColumn.length == 1) {	// 如果是统计列
                    var o = $(th);
                    var template = figure_MapAttr_Template(o.data()); // 根据该列表头的数据(data)获取到与当前列类型一致的表单元素
                    var name = template.attr("name");
                    var statisticsElement = $("#" + name + "_Statistics");
                    $(":input[name=" + name + "]").each(function (i, e) {	// 根据遍历该列所有元素
                        $(e).unbind("change");
                        $(e).bind("change", function (o) {	// 为该列所有元素增加onchange事件
                            doStatistics(matchesColumn[0].exp, name, statisticsElement);
                        });
                        if (i == 0) {
                            $(e).trigger("change"); // 页面初始化后进行合计计算(仅触发合计列第一个元素即可)
                        }
                    });
                }
            });
        }

        var statisticsFlag = false;

        // 生成统计行
        function addStatisticsRow() {
            statisticsFlag = true;
            // 统计行
            var statisticsRow = $("<tr></tr>");
            statisticsRow.data().customRowType = "statistics";
            // 遍历表头
            $.each(getUseHeadTh(), function (i, th) {
                var coltype = $(th).data().coltype;
                if (typeof coltype != "undefined" && coltype == "SN") {	// 统计行行号列
                    //statisticsRow.append("<td>" + ($("#dtlDiv div table tbody tr").length + 1) + "</td>");
                    statisticsRow.append("<td>&nbsp;</td>");
                } else {	// 其它列
                    var matchesColumn = $.grep(window.columnExp, function (val) {	// 根据表头的colname与待统计列的KeyOfEn对比
                        return val.KeyOfEn == $(th).data().colname;
                    });
                    if (matchesColumn.length == 1) {	// 如果是统计列
                        var o = $(th);
                        var template = figure_MapAttr_Template(o.data()); // 根据该列表头的数据(data)获取到与当前列类型一致的表单元素
                        var name = template.attr("name");
                        template.attr("id", name + "_Statistics");
                        template.attr("name", name + "_Statistics");
                        template.attr('disabled', true);
                        var td = $("<td></td>");
                        td.append(template);
                        statisticsRow.append(td);
                    } else {	// 非统计列直接赋空<td></td>
                        statisticsRow.append("<td></td>");
                    }
                }
            });
            // 新增统计行
            $("#dtlDiv div table tbody").append(statisticsRow);
        }

        function doAlignColumns() {
            // 对齐列单元格
            var headerCount = getUseHeadTh().length;
            $.each(getUseHeadTh(), function (hi, th) {
                var realWidth = $(this).outerWidth(true);
                var tpaddWidth = realWidth - $(this).width();
                var definedWidth = $(this).data().UIWidth;
                var width;
                if (typeof realWidth != "undefined" && realWidth > 0) {
                    width = realWidth;
                } else if (typeof definedWidth != "undefined") {
                    width = definedWidth;
                } else if (hi == 0) {
                    width = 40;
                } else if (hi + 1 == headerCount) {
                    width = 40;
                } else {
                    width = 100;
                }
                (function (hi, headerCount, width) {
                    $("#dtlDiv div table tbody tr").each(function (di, td) {
                        var td = $(this).children().eq(hi);
                        var children = td.children();
                        var paddWidth = children.outerWidth() - children.width();
                        if (children.first().is("img")) {

                        } else {
                            if (children.length == 1)
                                children.first().width(width - 5);
                        }
                        if (hi == 0) {
                            td.width(width - 2);
                            //children.width(20.34);
                        } else if (hi + 1 == headerCount) {
                            // 最后一列
                            td.width(width - 1);
                        } else {
                            td.width(width - 3);
                            if (children.length == 1)
                                children.width(width - paddWidth - 5);
                        }
                    });
                })(hi, headerCount, width);
            });
        }


        function parentStatistics(extArr) {
            if ($.isArray(extArr)) {
                $.each(extArr, function (i, extObj) {
                    var columnsName = getColumnElementsName(extObj.DtlColumn);
                    if ($(":input[name=" + columnsName + "]").length == 0)
                        doStatistics(extObj.exp, columnsName, $("#TB_" + extObj.AttrOfOper, parent.document), $("#TB_" + extObj.DaXieAttrOfOper, parent.document));

                    $(":input[name=" + columnsName + "]").each(function (i, e) {
                        $(e).bind("change", function (o) {
                            doStatistics(extObj.exp, columnsName, $("#TB_" + extObj.AttrOfOper, parent.document), $("#TB_" + extObj.DaXieAttrOfOper, parent.document));
                            //是否使用合计计算其他值
                            if (extObj.Tag == "1")
                                DBAccess.RunFunctionReturnStr(extObj.Tag1);
                        });
                        if (i == 0) {
                            $(e).trigger("change");
                        }
                    });
                });
            }
        }

        /**
        * @param exp 表达式
        * @param name 待统计列元素name
        * @param template 统计单元格jquery对象
        */
        function doStatistics(exp, name, template, DXTemplate) {
            var expVal = 0;
            if (exp == "Sum") {	// 和
                var sum = 0;
                //判断值是否含有小数
                var flag = false;
                $(":input[name=" + name + "]").each(function (i, e) {
                    var val = $(e).val();
                    val = val.replace(/,/g, "");
                    val = val.replace(/￥/g, "");
                    sum += parseFloat(val);
                    if ($(e).val().indexOf('.') >= 0)
                        flag = true;
                });
                if (flag) {
                    if (!/\./.test(sum))
                        sum += '.00';
                    //防止出现相加小数位数不正确的情况
                    parseFloat(sum).toFixed(2);
                }
                expVal = sum;


                //sum = formatNumber(sum, 2, ',');

                template.val(sum);
            } else if (exp == "Avg") {	// 平均数
                var sum = 0;
                var count = 0;
                $(":input[name=" + name + "]").each(function (i, e) {
                    var val = $(e).val();
                    val = val.replace(/,/g, "");
                    val = val.replace(/￥/g, "");
                    sum += parseFloat(val);
                    count++;
                });
                if (count > 0) {
                    expVal = sum / count;

                    var avg = formatNumber(sum / count, 2, ',');

                    template.val(avg);
                }
            } else if (exp == "Max") {	// 最大
                var max = null;
                $(":input[name=" + name + "]").each(function (i, e) {
                    var val = $(e).val();
                    val = val.replace(/,/g, "");
                    val = val.replace(/￥/g, "");

                    var value = parseFloat(val);
                    if (max == null) {
                        max = value;
                    } else if (value > max) {
                        max = value;
                    }
                });
                expVal = max;
                max = formatNumber(max, 0, ',');
                template.val(max);
            } else if (exp == "Min") {	// 最小
                var min = null;
                $(":input[name=" + name + "]").each(function (i, e) {
                    var val = $(e).val();
                    val = val.replace(/,/g, "");
                    val = val.replace(/￥/g, "");

                    var value = parseFloat(val);
                    if (min == null) {
                        min = value;
                    } else if (value < min) {
                        min = value;
                    }
                });
                expVal = min;
                min = formatNumber(min, 0, ',');
                template.val(min);
            }

            if (DXTemplate.length == 1)
                DXTemplate.val(Rmb2DaXie(expVal));
        }

        function getColumnElementsName(KeyOfEn) {
            var name = undefined;
            if (KeyOfEn) {
                $.each(getUseHeadTh(), function (i, th) {
                    var data = $(th).data();
                    if (data.colname === KeyOfEn) {
                        var template = figure_MapAttr_Template(data);
                        name = template.attr("name");
                        return false;
                    }
                });
            }
            return name;
        }

        //选项 导入导出功能.
        function Option(impModel) {
            // 0 不导入   1 表格查询模式导入（高级） 2 Excel文件导入 3单据模式 4 表格查询模式导入（简洁）
            if (impModel == 0) {
                alert("请配置导入方式。");
            }

            //表格查询模式导入
            if (impModel == 1) {
                var url = window.location.href;
                url = url.replace('Dtl.htm', 'DtlImp.htm');
                url = url.replace('Dtl2017.htm', 'DtlImp.htm');
                url = url.replace('Dtl2018.htm', 'DtlImp.htm');
            }

            //excel模式导入方式
            if (impModel == 2) {
                var url = window.location.href;
                url = url.replace('Dtl.htm', 'DtlImpByExcel.htm');
                url = url.replace('Dtl2017.htm', 'DtlImpByExcel.htm');
                url = url.replace('Dtl2018.htm', 'DtlImpByExcel.htm');
            }

            //单据模式
            if (impModel == 3) {
                var url = window.location.href;
                url = url.replace('Dtl.htm', 'DtlImpByBill.htm');
                url = url.replace('Dtl2017.htm', 'DtlImpByBill.htm');
                url = url.replace('Dtl2018.htm', 'DtlImpByBill.htm');
            }


            if (window.parent && window.parent.OpenBootStrapModal) {

                var dtl_ImpMapExt = $.grep(mapExts, function (ext) { return ext.ExtType == "DtlImp" });

                var title = "导入数据";
                var digWidth = 900;
                var digHeight = 450;
                if (dtl_ImpMapExt.length > 0) {
                    digWidth = dtl_ImpMapExt[0].W;
                    digHeight = dtl_ImpMapExt[0].H;

                    var atPara = dtl_ImpMapExt[0].AtPara;
                    var reg = new RegExp("(^|@)Title=([^@]*)(@|$)");
                    var results = atPara.match(reg);
                    if (results != null) {
                        title = unescape(results[2]);
                    }
                }
                window.parent.OpenBootStrapModal(url, "eudlgframe", title, digWidth, digHeight, "icon-edit", false, function () { }, null, function () {
                    location = location;
                });
                return;
            }

            //window.location.href = url;
            WinOpenIt(url);
        }

        function WinOpenIt(url) {
            var self = window.open(url, 'newwindow', 'height=500, width=700, top=150, left=150, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no');//window.open(url);
            var loop = setInterval(function () {
                if (self.closed) {
                    clearInterval(loop);
                    InitPage();
                    InitHomeCount();
                }
            }, 1);
        }
        //选项 导出功能.
        function ExpOption() {
            var handler = new HttpHandler("BP.WF.HttpHandler.WF_Comm");
            handler.AddPara("EnsName", GetQueryString("EnsName"));
            handler.AddPara("WorkId", GetQueryString("WorkId"));
            handler.AddPara("FID", GetQueryString("FID"));
            //查询集合
            var data = handler.DoMethodReturnString("SearchDtl_Exp");
            var url = "";
            if (data.indexOf('err@') == 0) {
                alert(data);
            }

            data = basePath + data;

            window.open(data);
            return;

        }

        //根据表格中编辑过的值，设置表格TR 的 data
        function setTrDataByData(rowIndex) {
            var tr = $($('table tbody tr')[rowIndex]);
            var tdArr = tr.children();
            var trData = tr.data().data;
            //input text
            //select
            //循环  td
            $.each(tdArr, function (i, tdObj) {
                tdObj = $(tdObj);
                var text = tdObj.find('input[type=text]');
                var textarea = tdObj.find('textarea[type=text]');
                var select = tdObj.find('select');
                var checkbox = tdObj.find('input[type=checkbox]');
                var radio = tdObj.find('input[type=radio]');
                var keyOfEn = '', value = '';
                if (text.length == 3) { // 小范围多选
                    for (var idx = 0; idx < 3; idx++) {
                        var name = $(text[idx]).attr('name');
                        if (name == null || name == undefined)
                            continue;
                        if (name.indexOf('TB_') == 0) {
                            keyOfEn = name.substring(3);
                            value = $(text[idx]).val();
                            break;
                        }

                    }

                }
                if (text.length == 1) {
                    var name = text.attr('name');
                    if (name.indexOf('TB_') == 0) {
                        keyOfEn = name.substring(3);
                        value = text.val();
                    }
                } else if (textarea.length == 1) {
                    var name = textarea.attr('name');
                    if (name.indexOf('TB_') == 0) {
                        keyOfEn = name.substring(3);
                        value = textarea.val();
                    }
                } else if (select.length == 1) {
                    var name = select.attr('name');
                    if (name.indexOf('DDL_') == 0) {
                        keyOfEn = name.substring(4);
                        value = select.val();
                    }
                }
                else if (checkbox.length == 1) {
                    var name = checkbox.attr('name');
                    if (name.indexOf('CB_') == 0) {
                        keyOfEn = name.substring(3);
                        value = checkbox[0].checked == true ? 1 : 0;
                    }
                } else if (checkbox.length > 1) {
                    $.each(checkbox, function (idx, obj) {
                        var name = $(obj).attr('name').replace("_" + rowIndex, "");
                        if (name.indexOf('CB_') == 0) {
                            keyOfEn = name.substring(3);
                            if (obj.checked == true)
                                value += obj.value + ',';
                        }
                    });

                }
                if (radio.length != 0) {
                    var name = $(radio[0]).attr('name');
                    keyOfEn = name.substring(3).replace("_" + rowIndex, "");
                    value = tdObj.find('input[type=radio]:checked ').val();

                }
                if (keyOfEn != "" && tr.data().customRowType != "statistics" && trData[keyOfEn] != undefined) {
                    trData[keyOfEn] = value;
                }
            });

            tr.data().data = trData;
        }

        //根据表格的DATA 更新 编辑的值
        function setTdDataByTrData(rowIndex) {
            var tr = $($('table tbody tr')[rowIndex]);
            var tdArr = tr.children();
            var trData = tr.data().data;
            //input text
            //select
            //循环  td
            $.each(tdArr, function (i, tdObj) {
                tdObj = $(tdObj);
                var text = tdObj.find('input[type=text]');
                var select = tdObj.find('select');
                var checkbox = tdObj.find('input[type=checkbox]');

                var keyOfEn = '', value = '', ddlText = '';
                if (text.length == 1) {
                    var name = text.attr('name');
                    if (name.indexOf('TB_') == 0) {
                        keyOfEn = name.substring(3);
                        value = text.val();

                        text.val(trData[keyOfEn]);
                    }
                } else if (select.length == 1) {
                    var name = select.attr('name');
                    if (name.indexOf('DDL_') == 0) {
                        keyOfEn = name.substring(4);
                        value = trData[keyOfEn];
                        ddlText = trData[keyOfEn + "TEXT"] || trData[keyOfEn + "Text"];
                        //对于只读的文本框 可能需要回填TEXT
                        var disabled = select.attr('disabled');
                        if ((disabled == "disabled" || disabled == true) && value != undefined && ddlText != undefined) {
                            var option = $('<option select="selected" value="' + value + '">' + ddlText + '</option>');
                            select.children().remove();
                            select.append(option);
                        }
                        else {
                            select.val(trData[keyOfEn]);
                        }
                    }
                } else if (checkbox.length == 1) {
                    var name = checkbox.attr('name');
                    if (name.indexOf('CB_') == 0) {
                        keyOfEn = name.substring(3);
                        checkbox[0].checked = trData[keyOfEn] == 1 ? true : false;
                        //alert(trData[keyOfEn])
                    }
                }
            });
        }

        function ChangeValue(obj) {
            //获取他的兄弟节点
            var s = $(obj).prev();
            $(s).val(obj.options[obj.selectedIndex].text);
            $(obj).parent().parent().data().data[$(obj).data().KeyOfEn + "T"] = obj.options[obj.selectedIndex].text;

        }


        //只能输入数字
        function keyDown(event) {
            var value = event.key;
            var reg_keleyi_com = /^[-+]?\d+$/;
            if (reg_keleyi_com.test(value)) {
                return '';
            } else {
                return value;
            }
        }

        var thisRowIndex = -1;
        //获取焦点时执行  改变currentRowIndex 再确定是否需要 存盘  获取焦点  上一行存盘 foucs
        function blurEvent(obj) {
            thisRowIndex = parseInt($($(obj.target).parent().parent().children()[0]).text()) - 1;
            if (obj.target.name.indexOf('CB_') == 0) {
                thisRowIndex = parseInt($($(obj.target).parent().parent().parent().children()[0]).text()) - 1;
            } else {
                thisRowIndex = parseInt($($(obj.target).parent().parent().children()[0]).text()) - 1;
            }
        }

        //离开表格，执行当前行的存盘  解决单行数据存盘问题 注册事件
        function regMouseLeaveTr() {
            $('.table.wupop tbody tr').bind('mouseleave', mouseLeaveTrFun);
        }

        //鼠标移出TR时执行的函数
        function mouseLeaveTrFun() {
            //移出TR时执行该事件
            if (thisRowIndex != pageData.currentRowIndex && $('#Msg').css('display') == 'none') {
                pageData.currentRowIndex = thisRowIndex;
                return; //暂时去掉行的保存
                //saveRow(pageData.currentRowIndex);
            }
            return;
        }
    </script>
    <style type="text/css">
        * {
            font-family: microsoftYaHei,'微软雅黑';
            font-size: 14px;
        }

        .errorInput {
            border-color: red !important;
        }

        input[type=text], input[type=password], select {
            box-sizing: border-box;
        }
    </style>
</head>
<body>
    <form>
        <input type="hidden" id="formExt" />
        <div id="Msg" style="text-align: center;display:none;"><img src="../Scripts/bootstrap/fonts/loading.gif" /></div>
        <div id="ContentDtlDiv">
            <div id="" class="portlet portlet-sortable light bg-inverse" style="padding: 0px; margin: 0px;">
                <div class="portlet-body " id="">
                    <div class="tab-content">
                        <div class="tab-pane active portlet_tab flowLists"  id="dtlDiv">
                            <div>
                                <table class="table wupop" data-data="true" id="dtlTable" border="0" cellspacing="0" cellpadding="0">
                                    <thead></thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div class="loadDate" style="text-align: center;">
                                <img src="../Scripts/bootstrap/fonts/loading.gif" />加载中...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <script type="text/javascript">

        var curRowIndex = 0;
       
        /**Pop弹出框的处理**/
        function PopDtlMapExt(mapAttr, mapExt, targetId, index, OID, objtr) {
            var val = $("#" + targetId).val();
            switch (mapAttr.GetPara("PopModel")) {
                case "PopBranchesAndLeaf": //树干叶子模式.
                    PopBranchesAndLeaf(mapExt, val, targetId, index, OID, objtr); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                case "PopBranches": //树干简单模式.
                    PopBranches(mapExt, val, targetId, index, OID, objtr); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                case "PopBindSFTable": //绑定字典表，外部数据源.
                    PopBindSFTable(mapExt, val, targetId, index, OID); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                case "PopBindEnum": //绑定枚举.
                    PopBindEnum(mapExt, val, targetId, index, OID); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                case "PopTableList": //绑定实体表.
                    PopTableList(mapExt, val, targetId, index, OID); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                case "PopGroupList": //分组模式.
                    PopGroupList(mapExt, targetId, index, OID); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                case "PopSelfUrl": //自定义url.
                    SelfUrl(mapExt, targetId, index, OID); //调用 /CCForm/JS/MultipleChoiceSmall.js 的方法来完成.
                    break;
                case "PopTableSearch": //表格查询.
                    PopTableSearch(mapExt, val, targetId, index, OID, objtr); //调用 /CCForm/JS/Pop.js 的方法来完成.
                    break;
                default: break;
            }
        }

        function AutoFull(tr, obj, dataType) {
            //替换
            var mapExt = $(obj.target).data().mapExt;
            var mapExtDoc = mapExt.Doc;
            var evelStr = mapExt.Doc;
            var tmpResult = 1;
            var tr = $(obj.target).parent().parent();
            var attrOfOperEle = $(obj.target).parent().parent().find('[name=TB_' + mapExt.AttrOfOper + "]");
            for (var m = 0; m < workNodeData.Sys_MapAttr.length; m++) {
                var mapAttr = workNodeData.Sys_MapAttr[m];
                var hasKeyOfEn = true;
                while (hasKeyOfEn) {
                    var mapExdDocKeyOfEnIndex = mapExtDoc.indexOf('@' + mapAttr.KeyOfEn);
                    var tranValue = mapAttr.KeyOfEn;
                    if (mapExdDocKeyOfEnIndex == -1) {
                        mapExdDocKeyOfEnIndex = mapExtDoc.indexOf('@' + mapAttr.Name);
                        tranValue = mapAttr.Name;
                        if (mapExdDocKeyOfEnIndex == -1)
                            hasKeyOfEn = false;
                    }
                    if (mapExdDocKeyOfEnIndex != -1) {
                        //判断参数后面是否是一个运算操作符
                        var optionVal = mapExtDoc.substring(mapExdDocKeyOfEnIndex + tranValue.length + 1, mapExdDocKeyOfEnIndex + tranValue.length + 2);

                        if (mapExdDocKeyOfEnIndex >= 0 && (optionVal == '+' || optionVal == '-' || optionVal == '*' || optionVal == '/' || optionVal == '')) {
                            mapExtDoc = mapExtDoc.replace('@' + tranValue, "parseFloat($(tr).find('[name=" + dataType + mapAttr.KeyOfEn + "]').val().replace(/,/g,'').replace(/￥/g,''))");
                        } else {
                            hasKeyOfEn = false;
                        }
                    }
                    
                }
            }

            tmpResult = eval(mapExtDoc);

            //修改值
            tmpResult = formatNumber(tmpResult, 2, ',');
            attrOfOperEle.val(tmpResult);
            attrOfOperEle.trigger("change"); // 触发合计计算


            $(tr).data().data[$(obj.target).data().mapExt.AttrOfOper] = tmpResult;

        }


        

        //必填项检查   名称最后是*号的必填  如果是选择框，值为'' 或者 显示值为 【*请选择】都算为未填 返回FALSE 检查必填项失败
        function checkBlanks() {
            var checkBlankResult = true;
            //获取所有的列名 找到带* 的LABEL mustInput

            //var lbs = $('.mustInput');
            var trs = $('.table.wupop tbody tr');
            for (var idx = 0; idx < trs.length; idx++) {
                var lbs = $($('table tbody tr')[idx]).find('.mustInput'); //获得所有的class=mustInput的元素.
                $.each(lbs, function (i, obj) {
                    if ($(obj).parent().css('display') != 'none' && $(obj).parent().next().css('display')) {
                        var keyofen = $(obj).data().keyofen
                        var ele = $('[id$=_' + keyofen + '_' + idx + ']');
                        if (ele.length > 1) {
                            var tempEle = ele;
                            if (tempEle[0].tagName.toUpperCase() == "INPUT")
                                ele = $(tempEle[0]);
                            if (tempEle[1].tagName.toUpperCase() == "INPUT")
                                ele = $(tempEle[1]);
                        }
                        if (ele.length == 1) {
                            switch (ele[0].tagName.toUpperCase()) {
                                case "INPUT":
                                    if (ele.attr('type') == "text") {
                                        if (ele.val() == "") {
                                            checkBlankResult = false;
                                            ele.addClass('layui-input errorInput');
                                        } else {
                                            ele.removeClass('errorInput');
                                        }
                                    }
                                    break;
                                case "SELECT":
                                    if (ele.val() == "" || ele.children('option:checked').text() == "*请选择") {
                                        checkBlankResult = false;
                                        ele.addClass('errorInput');
                                    } else {
                                        ele.removeClass('errorInput');
                                    }
                                    break;
                                case "TEXTAREA":
                                    if (ele.val() == "") {
                                        checkBlankResult = false;
                                        ele.addClass('errorInput');
                                    } else {
                                        ele.removeClass('errorInput');
                                    }
                                    break;
                            }
                        }
                    }
                });
            }
            return checkBlankResult;
        }

        //正则表达式检查
        function checkReg() {
            var checkRegResult = true;
            var trs = $('.table.wupop tbody tr');
            for (var idx = 0; idx < trs.length; idx++) {
                var regInputs = $($('table tbody tr')[idx]).find('.CheckRegInput');
                $.each(regInputs, function (i, obj) {
                    var objId = obj.id;
                    var mapExtData = $(obj).data();
                    if (mapExtData.Doc != undefined) {
                        var regDoc = mapExtData.Doc.replace(/【/g, '[').replace(/】/g, ']').replace(/（/g, '(').replace(/）/g, ')').replace(/｛/g, '{').replace(/｝/g, '}').replace(/，/g, ',');
                        var tag1 = mapExtData.Tag1;
                        if ($(obj).val() != undefined && $(obj).val() != '') {

                            var result = CheckRegInput(objId, regDoc, tag1);
                            if (!result) {
                                $(obj).addClass('errorInput');
                                checkRegResult = false;
                            } else {
                                $(obj).removeClass('errorInput');
                            }
                        }
                    }
                });
            }
            return checkRegResult;
        }

        var workNodeData = {};

        //初始化单选按钮
        function figure_Template_Rb(frmRb) {
            var eleHtml = '<div></div>';
            eleHtml = $(eleHtml);
            var childRbEle = $('<input id="RB_ChuLiFangShi2" type="radio"/>');
            var childLabEle = $('<label class="labRb"></label>');
            childLabEle.html(frmRb.Lab).attr('for', 'RB_' + frmRb.KeyOfEn + frmRb.IntKey).attr('name', 'RB_' + frmRb.KeyOfEn);

            childRbEle.val(frmRb.IntKey).attr('id', 'RB_' + frmRb.KeyOfEn + frmRb.IntKey).attr('name', 'RB_' + frmRb.KeyOfEn);
            if (frmRb.UIIsEnable == false)
                childRbEle.attr('disabled', 'disabled');
            var defVal = ConvertDefVal(workNodeData, '', frmRb.KeyOfEn);
            if (defVal == frmRb.IntKey) {
                childRbEle.attr("checked", "checked");
            }

            eleHtml.append(childRbEle).append(childLabEle);
            eleHtml.css('position', 'absolute').css('top', frmRb.Y).css('left', frmRb.X);
            return eleHtml;
        }

        function GenerCurTableTR() {
            var tr = $('.table.wupop tbody tr')[thisRowIndex];
            if (!tr) {
                //alert("没有获取到行数据");
                return false;
            }
            return tr;
        }

        function ReqCtrlVal(ctrlID) {
            var tr = GenerCurTableTR();
            if (tr && $(tr).find("[name=TB_" + ctrlID + ']').length > 0) {
                return $(tr).find("[name=TB_" + ctrlID + ']').val();
            }
            if (tr && $(tr).find("[name=DDL_" + ctrlID + ']').length > 0) {
                return $(tr).find("[name=DDL_" + ctrlID + ']').val();
            }
            return null;
        }

        // 设置值.
        function SetCtrlVal(ctrlID, val) {
            var tr = GenerCurTableTR();
            if (tr && $(tr).find("[name=TB_" + ctrlID + ']').length > 0) {
                return $(tr).find("[name=TB_" + ctrlID + ']').val(val);
            }
            if (tr && $(tr).find("[name=DDL_" + ctrlID + ']').length > 0) {
                return $(tr).find("[name=DDL_" + ctrlID + ']').val(val);
            }
        }



        function WindowOpenDtl() {
            var url = window.location.href;
            //获取屏幕的长宽
            var W = window.parent.document.body.clientWidth-40;
            var H = window.parent.document.body.clientHeight-40;
            window.parent.OpenLayuiDialog(url + "&IsShowFull=1", '编辑', W, 80, 'auto', true);
            return;

            var self = window.open(url);
            var loop = setInterval(function () {
                if (self.closed) {
                    clearInterval(loop);
                    window.location.href = url;
                }
            }, 1);
        }


    </script>
    <!--DIVINFO-->
    <div id='divinfo' style='width: 155px; position: absolute; color: Lime; display: none; cursor: pointer; text-align: left; border-color:Black'></div>
</body>
</html>
