//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由 代码生成器 自动生成。
//
//     可以对此文件进行更改。为避免无意中覆盖更改，请在更改此文件后删除本行并标注为“请勿覆盖”。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using BP.En;

namespace BP.Sys
{
    /// <summary>
    /// Excel字段字段常量
    /// </summary>
    public class ExcelFieldAttr : EntityNoNameAttr
    {
        /// <summary>
        /// 单元格名称
        /// </summary>
        public const string CellName = "CellName";

        /// <summary>
        /// 行号
        /// </summary>
        public const string CellRow = "CellRow";

        /// <summary>
        /// 列号
        /// </summary>
        public const string CellColumn = "CellColumn";

        /// <summary>
        /// ExcelSheet
        /// </summary>
        public const string FK_ExcelSheet = "FK_ExcelSheet";

        /// <summary>
        /// 存储字段名
        /// </summary>
        public const string Field = "Field";

        /// <summary>
        /// 存储数据表
        /// </summary>
        public const string FK_ExcelTable = "FK_ExcelTable";

        /// <summary>
        /// 值类型
        /// </summary>
        public const string DataType = "DataType";

        /// <summary>
        /// 数据源表/枚举
        /// </summary>
        public const string UIBindKey = "UIBindKey";

        /// <summary>
        /// 数据源表No
        /// </summary>
        public const string UIRefKey = "UIRefKey";

        /// <summary>
        /// 数据源表Name
        /// </summary>
        public const string UIRefKeyText = "UIRefKeyText";

        /// <summary>
        /// 校验器
        /// </summary>
        public const string Validators = "Validators";

        /// <summary>
        /// Excel模板
        /// </summary>
        public const string FK_ExcelFile = "FK_ExcelFile";

        /// <summary>
        ///  AtPara
        /// </summary>
        public const string AtPara = "AtPara";

        /// <summary>
        /// 单元格确认方式
        /// </summary>
        public const string ConfirmKind = "ConfirmKind";

        /// <summary>
        /// 单元格确认方向移动量
        /// </summary>
        public const string ConfirmCellCount = "ConfirmCellCount";

        /// <summary>
        /// 对应单元格值
        /// </summary>
        public const string ConfirmCellValue = "ConfirmCellValue";

        /// <summary>
        /// 对应单元格值重复选定次序
        /// </summary>
        public const string ConfirmRepeatIndex = "ConfirmRepeatIndex";

        /// <summary>
        /// 不计非空
        /// </summary>
        public const string SkipIsNull = "SkipIsNull";

        /// <summary>
        /// 同步到字段
        /// </summary>
        public const string SyncToField = "SyncToField";

    }

    /// <summary>
    /// Excel字段
    /// </summary>
    public class ExcelField : EntityNoName
    {
        #region 属性
        /// <summary>
        /// 获取或设置单元格名称
        /// </summary>
        public string CellName
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.CellName);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.CellName, value);
            }
        }

        /// <summary>
        /// 获取或设置行号
        /// </summary>
        public int CellRow
        {
            get
            {
                return this.GetValIntByKey(ExcelFieldAttr.CellRow);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.CellRow, value);
            }
        }

        /// <summary>
        /// 获取或设置列号
        /// </summary>
        public int CellColumn
        {
            get
            {
                return this.GetValIntByKey(ExcelFieldAttr.CellColumn);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.CellColumn, value);
            }
        }

        /// <summary>
        /// 获取或设置ExcelSheet
        /// </summary>
        public string FK_ExcelSheet
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.FK_ExcelSheet);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.FK_ExcelSheet, value);
            }
        }

        /// <summary>
        /// 获取或设置存储字段名
        /// </summary>
        public string Field
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.Field);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.Field, value);
            }
        }

        /// <summary>
        /// 获取或设置存储数据表
        /// </summary>
        public string FK_ExcelTable
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.FK_ExcelTable);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.FK_ExcelTable, value);
            }
        }

        /// <summary>
        /// 获取或设置值类型
        /// </summary>
        public ExcelFieldDataType DataType
        {
            get
            {
                return (ExcelFieldDataType)this.GetValIntByKey(ExcelFieldAttr.DataType, 0);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.DataType, (int)value);
            }
        }

        /// <summary>
        /// 获取或设置数据源表/枚举
        /// </summary>
        public string UIBindKey
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.UIBindKey);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.UIBindKey, value);
            }
        }

        /// <summary>
        /// 获取或设置数据源表No
        /// </summary>
        public string UIRefKey
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.UIRefKey);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.UIRefKey, value);
            }
        }

        /// <summary>
        /// 获取或设置数据源表Name
        /// </summary>
        public string UIRefKeyText
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.UIRefKeyText);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.UIRefKeyText, value);
            }
        }

        /// <summary>
        /// 获取或设置校验器
        /// </summary>
        public string Validators
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.Validators);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.Validators, value);
            }
        }

        /// <summary>
        /// 获取或设置Excel模板
        /// </summary>
        public string FK_ExcelFile
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.FK_ExcelFile);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.FK_ExcelFile, value);
            }
        }

        /// <summary>
        /// 获取或设置
        /// </summary>
        public string AtPara
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.AtPara);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.AtPara, value);
            }
        }

        /// <summary>
        /// 获取或设置单元格确认方式
        /// </summary>
        public ConfirmKind ConfirmKind
        {
            get
            {
                return (ConfirmKind)this.GetValIntByKey(ExcelFieldAttr.ConfirmKind, 0);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.ConfirmKind, (int)value);
            }
        }

        /// <summary>
        /// 获取或设置单元格确认方向移动量
        /// </summary>
        public int ConfirmCellCount
        {
            get
            {
                return this.GetValIntByKey(ExcelFieldAttr.ConfirmCellCount, 1);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.ConfirmCellCount, value);
            }
        }

        /// <summary>
        /// 获取或设置对应单元格值
        /// </summary>
        public string ConfirmCellValue
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.ConfirmCellValue);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.ConfirmCellValue, value);
            }
        }

        /// <summary>
        /// 获取或设置对应单元格值重复选定次序
        /// </summary>
        public int ConfirmRepeatIndex
        {
            get
            {
                return this.GetValIntByKey(ExcelFieldAttr.ConfirmRepeatIndex);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.ConfirmRepeatIndex, value);
            }
        }

        /// <summary>
        /// 获取或设置不计非空
        /// </summary>
        public bool SkipIsNull
        {
            get
            {
                return this.GetValBooleanByKey(ExcelFieldAttr.SkipIsNull, false);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.SkipIsNull, value);
            }
        }

        /// <summary>
        /// 获取或设置同步到字段
        /// </summary>
        public string SyncToField
        {
            get
            {
                return this.GetValStrByKey(ExcelFieldAttr.SyncToField);
            }
            set
            {
                this.SetValByKey(ExcelFieldAttr.SyncToField, value);
            }
        }

        #endregion 属性

        #region 构造方法
        public ExcelField()
        {
        }
        #endregion 构造方法

        #region 权限控制
        public override UAC HisUAC
        {
            get
            {
                UAC uac = new UAC();
                uac.OpenAll();
                return uac;
            }
        }
        #endregion 权限控制

        #region EnMap
        /// <summary>
        /// Excel字段Map
        /// </summary>
        public override Map EnMap
        {
            get
            {
                if (this._enMap != null)
                    return this._enMap;

                Map map = new Map("Sys_ExcelField");
                map.EnDesc = "Excel字段";

                map.AddTBStringPK(ExcelFieldAttr.No, null, "编号", true, true, 1, 36, 200);
                map.AddTBString(ExcelFieldAttr.Name, null, "名称", true, false, 1, 50, 100);
                map.AddTBString(ExcelFieldAttr.CellName, null, "单元格名称", true, false, 1, 50, 100);
                map.AddTBInt(ExcelFieldAttr.CellRow, 0, "行号", true, false);
                map.AddTBInt(ExcelFieldAttr.CellColumn, 0, "列号", true, false);
                map.AddDDLEntities(ExcelFieldAttr.FK_ExcelSheet, null, "所属ExcelSheet表", new ExcelSheets(), false);
                map.AddTBString(ExcelFieldAttr.Field, null, "存储字段名", true, false, 1, 50, 100);
                map.AddDDLEntities(ExcelFieldAttr.FK_ExcelTable, null, "存储数据表", new ExcelTables(), false);
                map.AddDDLSysEnum(ExcelFieldAttr.DataType, 0, "值类型", true, true, ExcelFieldAttr.DataType, "@0=字符串@1=整数@2=浮点数@3=日期@4=日期时间@5=外键@6=枚举");
                map.AddTBString(ExcelFieldAttr.UIBindKey, null, "外键表/枚举", true, false, 1, 100, 100);
                map.AddTBString(ExcelFieldAttr.UIRefKey, null, "外键表No", true, false, 1, 30, 100);
                map.AddTBString(ExcelFieldAttr.UIRefKeyText, null, "外键表Name", true, false, 1, 30, 100);
                map.AddTBString(ExcelFieldAttr.Validators, null, "校验器", true, false, 1, 4000, 100);
                map.AddDDLEntities(ExcelFieldAttr.FK_ExcelFile, null, "所属Excel模板", new ExcelFiles(), false);
                map.AddTBStringDoc(ExcelFieldAttr.AtPara, null, "参数", true, false, true);
                map.AddDDLSysEnum(ExcelFieldAttr.ConfirmKind, 0, "单元格确认方式", true, true, ExcelFieldAttr.ConfirmKind, "@0=当前单元格@1=左方单元格@2=上方单元格@3=右方单元格@4=下方单元格");
                map.AddTBInt(ExcelFieldAttr.ConfirmCellCount, 1, "单元格确认方向移动量", true, false);
                map.AddTBString(ExcelFieldAttr.ConfirmCellValue, null, "对应单元格值", true, false, 1, 200, 100);
                map.AddTBInt(ExcelFieldAttr.ConfirmRepeatIndex, 0, "对应单元格值重复选定次序", true, false);
                map.AddBoolean(ExcelFieldAttr.SkipIsNull, false, "不计非空", true, true);
                map.AddTBString(ExcelFieldAttr.SyncToField, null, "同步到字段", true, false, 1, 100, 100);

                this._enMap = map;
                return this._enMap;
            }
        }
        #endregion EnMap

        #region 重写事件
        /// <summary>
        /// 记录添加前事件
        /// </summary>
        protected override bool beforeInsert()
        {
            //检测单元格是否已经使用过
            if (this.IsExit(ExcelFieldAttr.CellName, this.CellName, ExcelFieldAttr.FK_ExcelSheet, this.FK_ExcelSheet, ExcelFieldAttr.FK_ExcelTable, this.FK_ExcelTable))
                throw new Exception("单元格 " + this.CellName + " 已经使用，不能重复使用！");

            this.No = Guid.NewGuid().ToString("d");
            return base.beforeInsert();
        }

        #endregion 重写事件
    }

    /// <summary>
    /// Excel字段集合
    /// </summary>
    public class ExcelFields : EntitiesNoName
    {
        #region 属性
        /// <summary>
        /// 生成Excel字段实体
        /// </summary>
        public override Entity GetNewEntity
        {
            get
            {
                return new ExcelField();
            }
        }
        #endregion 属性

        #region 构造方法
        public ExcelFields()
        {
        }

        public ExcelFields(string fk_excelfile)
        {
            QueryObject qo = new QueryObject(this);
            qo.AddWhere(ExcelFieldAttr.FK_ExcelFile, fk_excelfile);
            qo.addOrderBy(ExcelFieldAttr.CellRow, ExcelFieldAttr.CellColumn);
            qo.DoQuery();
        }
        #endregion 构造方法
    }

    public enum ConfirmKind
    {
        /// <summary>
        /// 当前单元格
        /// </summary>
        Cell,
        /// <summary>
        /// 左方单元格
        /// </summary>
        LeftCell,
        /// <summary>
        /// 上方单元格
        /// </summary>
        TopCell,
        /// <summary>
        /// 右方单元格
        /// </summary>
        RightCell,
        /// <summary>
        /// 下方单元格
        /// </summary>
        BottomCell
    }

    public enum ExcelFieldDataType
    {
        String = 0,
        Int = 1,
        Float = 2,
        Date = 3,
        DateTime = 4,
        ForeignKey = 5,
        Enum = 6
    }
}
