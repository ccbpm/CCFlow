<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Common</name>
    </assembly>
    <members>
        <member name="M:ServiceStack.AppTasks.Register(System.String,System.Action{System.String[]})">
            <summary>
            Register Task to run in APP_TASKS=task1;task2
            </summary>
        </member>
        <member name="M:ServiceStack.AssertUtils.AreNotNull(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asserts that the supplied arguments are not null.
            
            AssertUtils.AreNotNull(new Dictionary&lt;string,object&gt;{ {"name",null} });
              will throw new ArgumentNullException("name");
            </summary>
            <param name="fieldMap">The field map.</param>
        </member>
        <member name="T:ServiceStack.AsyncEx.AsyncManualResetEvent">
            <summary>
            An async-compatible manual-reset event.
            </summary>
        </member>
        <member name="F:ServiceStack.AsyncEx.AsyncManualResetEvent._mutex">
            <summary>
            The object used for synchronization.
            </summary>
        </member>
        <member name="F:ServiceStack.AsyncEx.AsyncManualResetEvent._tcs">
            <summary>
            The current state of the event.
            </summary>
        </member>
        <member name="F:ServiceStack.AsyncEx.AsyncManualResetEvent._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates an async-compatible manual-reset event.
            </summary>
            <param name="set">Whether the manual-reset event is initially set or unset.</param>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.#ctor">
            <summary>
            Creates an async-compatible manual-reset event that is initially unset.
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncEx.AsyncManualResetEvent.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous manual-reset event.
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncEx.AsyncManualResetEvent.IsSet">
            <summary>
            Whether this event is currently set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for this event to be set or for the wait to be canceled.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.Wait">
            <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.Set">
            <summary>
            Sets the event, atomically completing every task returned by <see cref="O:ServiceStack.AsyncEx.AsyncManualResetEvent.WaitAsync"/>. If the event is already set, this method does nothing.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.AsyncManualResetEvent.Reset">
            <summary>
            Resets the event. If the event is already reset, this method does nothing.
            </summary>
        </member>
        <member name="T:ServiceStack.AsyncEx.IdManager`1">
            <summary>
            Allocates Ids for instances on demand. 0 is an invalid/unassigned Id. Ids may be non-unique in very long-running systems. This is similar to the Id system used by <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <typeparam name="TTag">The type for which ids are generated.</typeparam>
        </member>
        <member name="F:ServiceStack.AsyncEx.IdManager`1._lastId">
            <summary>
            The last id generated for this type. This is 0 if no ids have been generated.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.IdManager`1.GetId(System.Int32@)">
            <summary>
            Returns the id, allocating it if necessary.
            </summary>
            <param name="id">A reference to the field containing the id.</param>
        </member>
        <member name="T:ServiceStack.AsyncEx.CancellationTokenTaskSource`1">
            <summary>
            Holds the task for a cancellation token, as well as the token registration. The registration is disposed when this instance is disposed.
            </summary>
        </member>
        <member name="F:ServiceStack.AsyncEx.CancellationTokenTaskSource`1._registration">
            <summary>
            The cancellation token registration, if any. This is <c>null</c> if the registration was not necessary.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.CancellationTokenTaskSource`1.#ctor(System.Threading.CancellationToken)">
            <summary>
            Creates a task for the specified cancellation token, registering with the token if necessary.
            </summary>
            <param name="cancellationToken">The cancellation token to observe.</param>
        </member>
        <member name="P:ServiceStack.AsyncEx.CancellationTokenTaskSource`1.Task">
            <summary>
            Gets the task for the source cancellation token.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.CancellationTokenTaskSource`1.Dispose">
            <summary>
            Disposes the cancellation token registration, if any. Note that this may cause <see cref="P:ServiceStack.AsyncEx.CancellationTokenTaskSource`1.Task"/> to never complete.
            </summary>
        </member>
        <member name="T:ServiceStack.AsyncEx.TaskCompletionSourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``2(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/>.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <typeparam name="TSourceResult">The type of the result of the source asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task,System.Func{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/> but using the result value from <paramref name="resultFunc"/> if the task completed successfully.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="resultFunc">A delegate that returns the result with which to complete the task completion source, if the task completed successfully. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskCompletionSourceExtensions.CreateAsyncTaskSource``1">
            <summary>
            Creates a new TCS for use with async code, and which forces its continuations to execute asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result of the TCS.</typeparam>
        </member>
        <member name="T:ServiceStack.AsyncEx.TaskExtensions">
            <summary>
            Provides synchronous extension methods for tasks.
            </summary>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for the task to complete, or for the cancellation token to be canceled.
            </summary>
            <param name="this">The task to wait for. May not be <c>null</c>.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>The result of the task.</returns>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:ServiceStack.AsyncEx.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed.</exception>
        </member>
        <member name="M:ServiceStack.AsyncEx.ExceptionHelpers.PrepareForRethrow(System.Exception)">
            <summary>
            Attempts to prepare the exception for re-throwing by preserving the stack trace. The returned exception should be immediately thrown.
            </summary>
            <param name="exception">The exception. May not be <c>null</c>.</param>
            <returns>The <see cref="T:System.Exception"/> that was passed into this method.</returns>
        </member>
        <member name="M:ServiceStack.CommandsUtils.ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable{ServiceStack.Commands.ICommandExec})">
            <summary>
            Provide the an option for the callee to block until all commands are executed
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.EnumerableExtensions.EquivalentTo(System.Byte[],System.Byte[])">
            <summary>
            Constant Time byte[] comparison
            </summary>
        </member>
        <member name="M:ServiceStack.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return T[0] when enumerable is null, safe to use in enumerations like foreach
            </summary>
        </member>
        <member name="M:ServiceStack.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the textual description of the enum if it has one. e.g.
            
            <code>
            enum UserColors
            {
                [Description("Bright Red")]
                BrightRed
            }
            UserColors.BrightRed.ToDescription();
            </code>
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.ExecUtils.BaseDelayMs">
            <summary>
            Default base sleep time (milliseconds).
            </summary>
        </member>
        <member name="P:ServiceStack.ExecUtils.MaxBackOffMs">
            <summary>
            Default maximum back-off time before retrying a request
            </summary>
        </member>
        <member name="P:ServiceStack.ExecUtils.MaxRetries">
            <summary>
            Maximum retry limit. Avoids integer overflow issues.
            </summary>
        </member>
        <member name="M:ServiceStack.ExecUtils.SleepBackOffMultiplier(System.Int32)">
            <summary>
            How long to sleep before next retry using Exponential BackOff delay with Full Jitter.
            </summary>
            <param name="retriesAttempted"></param>
        </member>
        <member name="M:ServiceStack.ExecUtils.DelayBackOffMultiplierAsync(System.Int32)">
            <summary>
            How long to wait before next retry using Exponential BackOff delay with Full Jitter.
            </summary>
            <param name="retriesAttempted"></param>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateFullJitterBackOffDelay(System.Int32)">
            <summary>
            Exponential BackOff Delay with Full Jitter
            </summary>
            <param name="retriesAttempted"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateFullJitterBackOffDelay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Exponential BackOff Delay with Full Jitter from:
            https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/retry/PredefinedBackoffStrategies.java
            </summary>
            <param name="retriesAttempted"></param>
            <param name="baseDelay"></param>
            <param name="maxBackOffMs"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateExponentialDelay(System.Int32)">
            <summary>
            Calculate exponential retry back-off.
            </summary>
            <param name="retriesAttempted"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateExponentialDelay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate exponential retry back-off.
            </summary>
            <param name="retriesAttempted"></param>
            <param name="baseDelay"></param>
            <param name="maxBackOffMs"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateMemoryLockDelay(System.Int32)">
            <summary>
            Calculate back-off logic for obtaining an in memory lock 
            </summary>
            <param name="retries"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Extensions.UtilExtensions">
            <summary>
            Move conflicting extension methods to ServiceStack.Extensions namespace 
            </summary>
        </member>
        <member name="M:ServiceStack.FuncUtils.TryExec(System.Action)">
            <summary>
            Invokes the action provided and returns true if no exception was thrown.
            Otherwise logs the exception and returns false if an exception was thrown.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.GitHubGateway.AccessToken">
            <summary>
            AccessTokenSecret
            </summary>
        </member>
        <member name="P:ServiceStack.GitHubGateway.GetJsonFilter">
            <summary>
            Intercept and override GitHub JSON API requests
            </summary>
        </member>
        <member name="M:ServiceStack.GitHubGateway.WriteGistFiles(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Create or Write Gist Text Files. Requires AccessToken
            </summary>
        </member>
        <member name="M:ServiceStack.GitHubGateway.CreateGistFile(System.String,System.String,System.String)">
            <summary>
            Create new Gist File. Requires AccessToken
            </summary>
        </member>
        <member name="M:ServiceStack.GitHubGateway.WriteGistFile(System.String,System.String,System.String)">
            <summary>
            Create or Write Gist File. Requires AccessToken
            </summary>
        </member>
        <member name="T:ServiceStack.Inspect">
            <summary>
            Helper utility for inspecting variables
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.vars(System.Object)">
            <summary>
            Dump serialized values to 'vars.json'
            </summary>
            <param name="anonArgs">Anonymous object with named value</param>
        </member>
        <member name="M:ServiceStack.Inspect.dump``1(``0)">
            <summary>
            Recursively prints the contents of any POCO object in a human-friendly, readable format
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.printDump``1(``0)">
            <summary>
            Print Dump to Console.WriteLine
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.dumpTable(System.Object)">
            <summary>
            Dump object in Ascii Markdown table
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.dumpTable(System.Object,ServiceStack.TextDumpOptions)">
            <summary>
            Dump object in Ascii Markdown table
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.dumpTable(System.Object,System.String[])">
            <summary>
            Dump object in Ascii Markdown table using specified column headers
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.printDumpTable(System.Object)">
            <summary>
            Print Dump object in Ascii Markdown table
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.printDumpTable(System.Object,System.String[])">
            <summary>
            Print Dump object in Ascii Markdown table using specified column headers
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.htmlDump(System.Object)">
            <summary>
            Recursively prints the contents of any POCO object to HTML
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.htmlDump(System.Object,ServiceStack.HtmlDumpOptions)">
            <summary>
            Recursively prints the contents of any POCO object to HTML
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.htmlDump(System.Object,System.String[])">
            <summary>
            Recursively prints the contents of any POCO object to HTML with specified columns
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.printHtmlDump(System.Object)">
            <summary>
            Print htmlDump object
            </summary>
        </member>
        <member name="M:ServiceStack.Inspect.printHtmlDump(System.Object,System.String[])">
            <summary>
            Print htmlDump object with specified columns
            </summary>
        </member>
        <member name="T:ServiceStack.IO.FileContents">
            <summary>
            Transforms multiple data content types into a FileContents containing either a binary Stream or text string
            </summary>
        </member>
        <member name="M:ServiceStack.IO.FileContents.GetAsync(System.Object,System.Boolean)">
            <summary>
            Transform multi supported content types into FileContents containing either Stream or string.
            If returning unbuffered Stream responsibility is up to callee to properly dispose
            </summary>
            <param name="contents"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.IO.VirtualDirectoryExtensions.GetFiles(ServiceStack.IO.IVirtualDirectory)">
            <summary>
            Get only files in this directory
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.IO.VirtualDirectoryExtensions.GetDirectories(ServiceStack.IO.IVirtualDirectory)">
            <summary>
            Get only sub directories in this directory
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.IO.VirtualDirectoryExtensions.GetAllFiles(ServiceStack.IO.IVirtualDirectory)">
            <summary>
            Get All Files in current and all sub directories
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.IPAddressExtensions">
            <summary>
            Useful IPAddressExtensions from: 
            http://blogs.msdn.com/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            
            </summary>
        </member>
        <member name="M:ServiceStack.IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses">
            <summary>
            Gets the ipv4 addresses from all Network Interfaces that have Subnet masks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses">
            <summary>
            Gets the ipv6 addresses from all Network Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.JS.Configure">
            <summary>
            Configure ServiceStack.Text JSON Serializer to use Templates JS parsing
            </summary>
        </member>
        <member name="M:ServiceStack.JS.expression(System.String)">
            <summary>
            Parse JS Expression into an AST Token
            </summary>
        </member>
        <member name="M:ServiceStack.JS.expressionCached(ServiceStack.Script.ScriptContext,System.String)">
            <summary>
            Returns cached AST of a single expression
            </summary>
        </member>
        <member name="M:ServiceStack.JS.scriptCached(ServiceStack.Script.ScriptContext,System.String)">
            <summary>
            Returns cached AST of a script
            </summary>
        </member>
        <member name="M:ServiceStack.JS.evalCached(ServiceStack.Script.ScriptContext,System.String)">
            <summary>
            Lightweight expression evaluator of a single JS Expression with results cached in global context cache
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogFactory">
            <summary>
            Creates a Console Logger, that logs all messages to: System.Console
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogger">
            <summary>
            Default logger is to Console.WriteLine
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.WriteLine
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ExecuteType">
            <summary>
            Categories of sql statements.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.None">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.NonQuery">
            <summary>
            DML statements that alter database state, e.g. INSERT, UPDATE
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Scalar">
            <summary>
            Statements that return a single record
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Reader">
            <summary>
            Statements that iterate over a result set
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.IDbProfiler">
            <summary>
            A callback for ProfiledDbConnection and family
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteStart(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Called when a command starts executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteFinish(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader finishes executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="reader"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ReaderFinish(System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader is done iterating through the data 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.OnError(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Exception)">
            <summary>
            Called when an error happens during execution of a command 
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="exception"></param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.IDbProfiler.IsActive">
            <summary>
            True if the profiler instance is active
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledConnection">
            <summary>
            Wraps a database connection, allowing sql execution timings to be collected when a <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler"/> session is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.#ctor(System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledConnection"/> that wraps <paramref name="connection"/>, 
            providing query execution profiling.  If profiler is null, no profiling will occur.
            </summary>
            <param name="connection">Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection</param>
            <param name="profiler">The currently started <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler"/> or null.</param>
            <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.InnerConnection">
            <summary>
            The underlying, real database connection to your db provider.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.Profiler">
            <summary>
            The current profiler instance; could be null.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.WrappedConnection">
            <summary>
            The raw connection this is wrapping
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory">
            <summary>
            Wrapper for a db provider factory to enable profiling
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.InitProfiledDbProviderFactory(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            Allow to re-init the provider factory.
            </summary>
            <param name="profiler"></param>
            <param name="wrappedFactory"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.#ctor(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            proxy
            </summary>
            <param name="profiler"></param>
            <param name="wrappedFactory"></param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CanCreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateCommand">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateConnection">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateParameter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateConnectionStringBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateCommandBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateDataAdapter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.PerfUtils.MeasureFor(System.Action,System.Int32)">
            <summary>
            Runs an action for a minimum of runForMs
            </summary>
            <param name="fn">What to run</param>
            <param name="runForMs">Minimum ms to run for</param>
            <returns>time elapsed in micro seconds</returns>
        </member>
        <member name="M:ServiceStack.PerfUtils.Measure(System.Action,System.Int32,System.Int32,System.Action,System.Action,System.Action)">
            <summary>
            Returns average microseconds an action takes when run for the specified runForMs
            </summary>
            <param name="fn">What to run</param>
            <param name="times">How many times to run for each iteration</param>
            <param name="runForMs">Minimum ms to run for</param>
            <param name="setup"></param>
            <param name="warmup"></param>
            <param name="teardown"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.ProcessUtils">
            <summary>
            Async Process Helper
            - https://gist.github.com/Indigo744/b5f3bd50df4b179651c876416bf70d0a
            </summary>
        </member>
        <member name="M:ServiceStack.ProcessUtils.ConvertToCmdExec(System.Diagnostics.ProcessStartInfo)">
            <summary>
            .NET Core / Win throws Win32Exception (193): The specified executable is not a valid application for this OS platform.
            This method converts it to a cmd.exe /c execute to workaround this 
            </summary>
        </member>
        <member name="M:ServiceStack.ProcessUtils.FindExePath(System.String)">
            <summary>
            Returns path of executable if exists within PATH
            </summary>
        </member>
        <member name="M:ServiceStack.ProcessUtils.RunShell(System.String,System.String)">
            <summary>
            Run the command with the OS's command runner 
            </summary>
        </member>
        <member name="M:ServiceStack.ProcessUtils.Run(System.String,System.String,System.String)">
            <summary>
            Run the process and return the Standard Output, any Standard Error output will throw an Exception
            </summary>
        </member>
        <member name="M:ServiceStack.ProcessUtils.RunShellAsync(System.String,System.String,System.Nullable{System.Int32},System.Action{System.String},System.Action{System.String})">
            <summary>
            Run the command with the OS's command runner 
            </summary>
        </member>
        <member name="M:ServiceStack.ProcessUtils.RunAsync(System.Diagnostics.ProcessStartInfo,System.Nullable{System.Int32},System.Action{System.String},System.Action{System.String})">
            <summary>
            Run a Process asynchronously, returning  entire captured process output, whilst streaming stdOut, stdErr callbacks
            </summary>
        </member>
        <member name="T:ServiceStack.ProcessResult">
            <summary>
            Run process result
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.ExitCode">
            <summary>
            Exit code
            <para>If NULL, process exited due to timeout</para>
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.StdErr">
            <summary>
            Standard error stream
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.StdOut">
            <summary>
            Standard output stream
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.StartAt">
            <summary>
            UTC Start
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.EndAt">
            <summary>
            UTC End
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.DurationMs">
            <summary>
            Duration (ms)
            </summary>
        </member>
        <member name="P:ServiceStack.ProcessResult.CallbackDurationMs">
            <summary>
            Duration (ms)
            </summary>
        </member>
        <member name="M:ServiceStack.RequestScriptUtils.GetRequestParams(ServiceStack.Web.IRequest)">
            <summary>
            Duplicate Params are given a unique key by appending a #1 suffix
            </summary>
        </member>
        <member name="T:ServiceStack.Script.CaptureScriptBlock">
             <summary>
             Captures the output and assigns it to the specified variable.
             Accepts an optional Object Dictionary as scope arguments when evaluating body.
            
             Usages: {{#capture output}} {{#each args}} - [{{it}}](/path?arg={{it}}) {{/each}} {{/capture}}
                     {{#capture output {nums:[1,2,3]} }} {{#each nums}} {{it}} {{/each}} {{/capture}}
                     {{#capture appendTo output {nums:[1,2,3]} }} {{#each nums}} {{it}} {{/each}} {{/capture}}
             </summary>
        </member>
        <member name="T:ServiceStack.Script.CsvScriptBlock">
            <summary>
            Parse csv contents into a string dictionary List and assign to identifier
            Usage: {{#csv list}}
                     Item,Qty
                     Apples,2
                     Oranges,3
                   {{/csv}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.EachScriptBlock">
            <summary>
            Handlebars.js like each block
            Usages: {{#each customers}} {{Name}} {{/each}}
                    {{#each customers}} {{it.Name}} {{/each}}
                    {{#each num in numbers}} {{num}} {{/each}}
                    {{#each num in [1,2,3]}} {{num}} {{/each}}
                    {{#each numbers}} {{it}} {{else}} no numbers {{/each}}
                    {{#each numbers}} {{it}} {{else if letters != null}} has letters {{else}} no numbers {{/each}}
                    {{#each n in numbers where n > 5}} {{it}} {{else}} no numbers > 5 {{/each}}
                    {{#each n in numbers where n > 5 orderby n skip 1 take 2}} {{it}} {{else}} no numbers > 5 {{/each}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.EvalScriptBlock">
             <summary>
             Special block which evaluates the rendered body as a ServiceStack Template
            
             Usages: {{#eval}}emit {{evaluateBodyOfArg}} at {{now}} {{/eval}}
             
                     {{#eval {scopeArg:1} }}
                         emit {{evaluateBodyOfArg}} at {{now}} with {{scopeArg}}
                     {{/eval}}
             
                     {{#eval {htmlDecode:true} }}
                         emit htmldecoded {{evaluateBodyOfArg}} at {{now}}
                     {{/eval}}
             
                     {{#eval {use:{methods:'ServiceStackScripts',plugins:['MarkdownScriptPlugin']} }}
                          emit {{evaluateBodyOfArg}} at {{now}} in new context
                     {{/eval}}
             
                     {{#eval { use:{context:true} } }}
                          emit {{evaluateBodyOfArg}} in host context
                     {{/eval}} 
             </summary>
        </member>
        <member name="T:ServiceStack.Script.FunctionScriptBlock">
            <summary>
            Define a reusable function
            Usage: {{#function calc(a, b) }}
                      a * b | to => c
                      a + b + c | return
                   {{/function}}
            </summary>
        </member>
        <member name="M:ServiceStack.Script.HtmlScriptBlocks.Register(ServiceStack.Script.ScriptContext)">
            <summary>
            Usages: {{#ul {each:items, class:'nav'} }} <li>{{it}}</li> {{/ul}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.IfScriptBlock">
            <summary>
            Handlebars.js like if block
            Usages: {{#if a > b}} max {{a}} {{/if}}
                    {{#if a > b}} max {{a}} {{else}} max {{b}} {{/if}}
                    {{#if a > b}} max {{a}} {{else if b > c}} max {{b}} {{else}} max {{c}} {{/if}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.KeyValuesScriptBlock">
            <summary>
            Parse text contents into a list of string Key/Value pairs and assign to specified identifier
            Usage: {{#keyvalues list}}
                     Apples  2
                     Oranges 3
                   {{/keyvalues}}
                   {{#keyvalues list ':'}}
                     Grape Fruit:  2
                     Rock Melon:   3
                   {{/keyvalues}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.NoopScriptBlock">
            <summary>
            Handlebars.js like noop block
            Usage: Remove {{#noop}} contents in here {{/noop}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.PartialScriptBlock">
            <summary>
            Partial Block doesn't emit anything it only creates and saves a partial in the PageResult
            
            Usages: {{#partial mypartial}} contents {{/partial}}
                    {{#partial mypartial {format:'html'} }} contents {{/partial}}
                    {{#partial mypartial {format:'html', pageArg:1} }} contents {{/partial}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.RawScriptBlock">
             <summary>
             Special block which captures the raw body as a string fragment
            
             Usages: {{#raw}}emit {{ verbatim }} body{{/raw}}
                     {{#raw varname}}assigned to varname{{/raw}}
                     {{#raw appendTo varname}}appended to varname{{/raw}}
             </summary>
        </member>
        <member name="T:ServiceStack.Script.WhileScriptBlock">
            <summary>
            while block
            Usages: {{#while times > 0}} {{times}}. {{times - 1 | to => times}} {{/while}}
                    {{#while b}} {{ false | to => b }} {{else}} {{b}} was false {{/while}}
            
            Max Iterations = Context.Args[ScriptConstants.MaxQuota]
            </summary>
        </member>
        <member name="T:ServiceStack.Script.WithScriptBlock">
            <summary>
            Handlebars.js like with block
            Usages: {{#with person}} Hi {{name}}, I'm {{age}} years old{{/with}}
                    {{#with person}} Hi {{name}}, I'm {{age}} years old {{else}} no person {{/with}}
            </summary>
        </member>
        <member name="M:ServiceStack.Script.JsTokenUtils.EvaluateToBoolAsync(ServiceStack.Script.JsToken,ServiceStack.Script.ScriptScopeContext)">
            <summary>
            Evaluate if result can be async, if so converts async result to Task&lt;object&gt; otherwise wraps result in a Task
            </summary>
        </member>
        <member name="M:ServiceStack.Script.JsTokenUtils.EvaluateToBool(ServiceStack.Script.JsToken,ServiceStack.Script.ScriptScopeContext,System.Nullable{System.Boolean}@,System.Threading.Tasks.Task{System.Boolean}@)">
            <summary>
            Evaluate if result can be async, if so converts async result to Task&lt;object&gt; otherwise wraps result in a Task
            </summary>
        </member>
        <member name="M:ServiceStack.Script.JsTokenUtils.EvaluateAsync(ServiceStack.Script.JsToken,ServiceStack.Script.ScriptScopeContext)">
            <summary>
            Evaluate if result can be async, if so converts async result to Task&lt;object&gt; otherwise wraps result in a Task
            </summary>
        </member>
        <member name="M:ServiceStack.Script.JsTokenUtils.Evaluate(ServiceStack.Script.JsToken,ServiceStack.Script.ScriptScopeContext,System.Object@,System.Threading.Tasks.Task{System.Object}@)">
            <summary>
            Evaluate then set asyncResult if Result was async, otherwise set result.
            </summary>
            <returns>true if result was synchronous otherwise false</returns>
        </member>
        <member name="M:ServiceStack.Script.DefaultScripts.putItem(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Puts value in dictionary at key  
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.typeof(System.String)">
            <summary>
            Returns Type from type name syntax of .NET's typeof() 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.Constructor(System.String)">
            <summary>
            Qualified Constructor Name Examples:
             - Type()
             - Type(string)
             - GenericType&lt;string&lt;(System.Int32)
             - Namespace.Type()
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.C(System.String)">
            <summary>
            Shorter Alias for Constructor
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.F(System.String)">
            <summary>
            Shorter Alias for Function
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.F(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Shorter Alias for Function(name,args)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.Function(System.String)">
            <summary>
            Qualified Method Name Examples:
             - Console.WriteLine(string)
             - Type.StaticMethod
             - Type.InstanceMethod
             - GenericType&lt;string&lt;.Method
             - GenericType&lt;string&lt;.GenericMethod&lt;System.Int32&lt;
             - Namespace.Type.Method
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ProtectedScripts.Function(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Resolve Function from qualified type name, when args Type list are unspecified fallback to use args to resolve ambiguous methods
            
            Qualified Method Name Examples:
             - Console.WriteLine ['string']
             - Type.StaticMethod
             - Type.InstanceMethod
             - GenericType&lt;string&lt;.Method
             - GenericType&lt;string&lt;.GenericMethod&lt;System.Int32&lt;
             - Namespace.Type.Method
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Page">
            <summary>
            The Page to Render
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.CodePage">
            <summary>
            The Code Page to Render
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.LayoutPage">
            <summary>
            Use specified Layout 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Layout">
            <summary>
            Use Layout with specified name
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.NoLayout">
            <summary>
            Render without any Layout
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Model">
            <summary>
            Extract Model Properties into Scope Args
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Args">
            <summary>
            Add additional Args available to all pages 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.ScriptMethods">
            <summary>
            Add additional script methods available to all pages
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.ScriptBlocks">
            <summary>
            Add additional script blocks available to all pages
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Partials">
            <summary>
            Add additional partials available to all pages
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Options">
            <summary>
            Return additional HTTP Headers in HTTP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.ContentType">
            <summary>
            Specify the Content-Type of the Response 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.PageTransformers">
            <summary>
            Transform the Page output using a chain of stream transformers
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.OutputTransformers">
            <summary>
            Transform the entire output using a chain of stream transformers
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.FilterTransformers">
            <summary>
            Available transformers that can transform context filter stream outputs
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.ExcludeFiltersNamed">
            <summary>
            Don't allow access to specified filters
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.LastFilterError">
            <summary>
            The last error thrown by a filter
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.LastFilterStackTrace">
            <summary>
            The StackTrace where the Last Error Occured 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.AssignExceptionsTo">
            <summary>
            What argument errors should be binded to
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.CatchExceptionsIn">
            <summary>
            What argument captured errors should be binded to
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.SkipFilterExecution">
            <summary>
            Whether to skip execution of all page filters and just write page string fragments
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.SkipExecutingFiltersIfError">
            <summary>
            Overrides Context to specify whether to Ignore or Continue executing filters on error 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.RethrowExceptions">
            <summary>
            Whether to always rethrow Exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.HaltExecution">
            <summary>
            Immediately halt execution of the page
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.DisableBuffering">
            <summary>
            Whether to disable buffering output and render directly to OutputStream
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.ReturnValue">
            <summary>
            The Return value of the page (if any)
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.StackDepth">
            <summary>
            The Current StackDepth
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.PartialStackDepth">
            <summary>
            The Current StackDepth of rendering partials
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.Evaluations">
            <summary>
            Can be used to track number of Evaluations
            </summary>
        </member>
        <member name="P:ServiceStack.Script.PageResult.PageProcessed">
            <summary>
            Can be used to track number of Evaluations
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptBlock.Body">
            <summary>
            Parse Body using Specified Language. Uses host language if unspecified.
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptConfig.FatalExceptions">
            <summary>
            Rethrow fatal exceptions thrown on incorrect API usage    
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.CacheFiles">
            <summary>
            Where to store cached files, if unspecified falls back to configured VirtualFiles if it implements IVirtualFiles (i.e. writable)  
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScanTypes">
            <summary>
            Scan Types and auto-register any Script Methods, Blocks and Code Pages
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScanAssemblies">
            <summary>
            Scan Assemblies and auto-register any Script Methods, Blocks and Code Pages
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScriptAssemblies">
            <summary>
            Allow scripting of Types from specified Assemblies
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScriptTypes">
            <summary>
            Allow scripting of the specified Types
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScriptNamespaces">
            <summary>
            Lookup Namespaces for resolving Types in Scripts
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.AllowScriptingOfAllTypes">
            <summary>
            Allow scripting of all Types in loaded Assemblies 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScriptTypeNameMap">
            <summary>
            Register short Type name accessible from scripts. (Advanced, use ScriptAssemblies/ScriptTypes first)
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.ScriptTypeQualifiedNameMap">
            <summary>
            Register long qualified Type name accessible from scripts. (Advanced, use ScriptAssemblies/ScriptTypes first)
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.InsertScriptMethods">
            <summary>
            Insert additional Methods at the start so they have priority over default Script Methods   
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.InsertScriptBlocks">
            <summary>
            Insert additional Blocks at the start so they have priority over default Script Blocks   
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.InsertPlugins">
            <summary>
            Insert plugins at the start of Plugins so they're registered first
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.FilterTransformers">
            <summary>
            Available transformers that can transform context filter stream outputs
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.CheckForModifiedPages">
            <summary>
            Whether to check for modified pages by default when not in DebugMode
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.CheckForModifiedPagesAfter">
            <summary>
            How long in between checking for modified pages
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.InvalidateCachesBefore">
            <summary>
            Existing caches and pages created prior to specified date should be invalidated 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.RenderExpressionExceptions">
            <summary>
            Render render filter exceptions in-line where filter is located
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.AssignExceptionsTo">
            <summary>
            What argument to assign Exceptions to
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.SkipExecutingFiltersIfError">
            <summary>
            Whether to skip executing expressions if an Exception was thrown
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.MaxQuota">
            <summary>
            Limit Max Iterations for Heavy Operations like rendering a Script Block (default 10K)
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.MaxEvaluations">
            <summary>
            Limit Max number for micro ops like evaluating an AST instruction (default 1M)
            </summary>
        </member>
        <member name="P:ServiceStack.Script.ScriptContext.MaxStackDepth">
            <summary>
            Limit Recursion Max StackDepth (default 25)
            </summary>
        </member>
        <member name="T:ServiceStack.Script.ScriptCode">
            <summary>
            Inverse of the #Script Language Template Syntax where each line is a statement
            i.e. in contrast to #Script's default where text contains embedded template expressions {{ ... }} 
            </summary>
        </member>
        <member name="T:ServiceStack.Script.DefnScriptBlock">
            <summary>
            Define and export a LISP function to the page
            Usage: {{#defn calc [a, b] }}
                      (let ( (c (* a b)) )
                        (+ a b c)
                      )
                   {{/defn}}
            </summary>
        </member>
        <member name="T:ServiceStack.Script.LispEvalException">
            <summary>Exception in evaluation</summary>
        </member>
        <member name="P:ServiceStack.Script.LispEvalException.Trace">
            <summary>Stack trace of Lisp evaluation</summary>
        </member>
        <member name="M:ServiceStack.Script.LispEvalException.#ctor(System.String,System.Object,System.Boolean)">
            <summary>Construct with a base message, cause, and
            a flag whether to quote strings in the cause.</summary>
        </member>
        <member name="M:ServiceStack.Script.LispEvalException.ToString">
            <summary>Return a string representation which contains
            the message and the stack trace.</summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp">
            <summary>
             A Lisp interpreter written in C# 7
            </summary><remarks>
             This is ported from Nuka Lisp in Dart
             (https://github.com/nukata/lisp-in-dart) except for bignum.
             It is named after ex-Nukata Town in Japan.
            </remarks>
        </member>
        <member name="P:ServiceStack.Script.Lisp.AllowLoadingRemoteScripts">
            <summary>
            Allow loading of remote scripts
             - https://example.org/lib.l
             - gist:{gist-id}
             - gist:{gist-id}/file.l
             - index:{name}
             - index:{name}/file.l
            </summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.IndexGistId">
            <summary>
            Gist where to resolve `index:{name}` references from
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Reset">
            <summary>
            Reset Global Symbols back to default
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Import(System.String)">
            <summary>
            Load Lisp into Global Symbols, a new CreateInterpreter() starts with a copy of global symbols
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Import(System.ReadOnlyMemory{System.Char})">
            <summary>
            Load Lisp into Global Symbols, a new CreateInterpreter() starts with a copy of global symbols
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.CreateInterpreter">
            <summary>Create a Lisp interpreter initialized pre-configured with Global Symbols.</summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.Cell">
            <summary>Cons cell</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.Cell.Car">
            <summary>Head part of the cons cell</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.Cell.Cdr">
            <summary>Tail part of the cons cell</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Cell.#ctor(System.Object,System.Object)">
            <summary>Construct a cons cell with its head and tail.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Cell.ToString">
            <summary>Make a simple string representation.</summary>
            <remarks>Do not invoke this for any circular list.</remarks>
        </member>
        <member name="P:ServiceStack.Script.Lisp.Cell.Length">
            <summary>Length as a list</summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.Sym">
            <summary>Lisp symbol</summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.Sym.Name">
            <summary>The symbol's name</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Sym.#ctor(System.String)">
            <summary>Construct a symbol that is not interned.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Sym.ToString">
            <summary>Return the symbol's name</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Sym.GetHashCode">
            <summary>Return the hashcode of the symbol's name</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.Sym.Table">
            <summary>Table of interned symbols</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Sym.New(System.String,System.Func{System.String,ServiceStack.Script.Lisp.Sym})">
            <summary>Return an interned symbol for the name.</summary>
            <remarks>If the name is not interned yet, such a symbol
            will be constructed with <paramref name="make"/>.</remarks>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Sym.New(System.String)">
            <summary>Construct an interned symbol.</summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.Sym.IsInterned">
            <summary>Is it interned?</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.TRUE">
            <summary>The symbol of <c>t</c></summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.LispFunc">
            <summary>Common base class of Lisp functions</summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.LispFunc.Carity">
            <summary>Number of arguments, made negative if the function
            has &amp;rest</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.LispFunc.#ctor(System.Int32)">
            <summary>Construct with Carity.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.LispFunc.MakeFrame(ServiceStack.Script.Lisp.Cell)">
            <summary>Make a frame for local variables from a list of
            actual arguments.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.LispFunc.EvalFrame(System.Object[],ServiceStack.Script.Lisp.Interpreter,ServiceStack.Script.Lisp.Cell)">
            <summary>Evaluate each expression in a frame.</summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.BuiltInFuncBody">
            <summary>Function type which represents any built-in function body
            </summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.BuiltInFunc">
            <summary>Built-in function</summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.BuiltInFunc.Name">
            <summary>Name of this function</summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.BuiltInFunc.Body">
            <summary>C# function as the body of this function</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.BuiltInFunc.#ctor(System.String,System.Int32,ServiceStack.Script.Lisp.BuiltInFuncBody)">
            <summary>Construct with Name, Carity and Body.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.BuiltInFunc.ToString">
            <summary>Return a string representation in Lisp.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.BuiltInFunc.EvalWith(ServiceStack.Script.Lisp.Interpreter,ServiceStack.Script.Lisp.Cell,ServiceStack.Script.Lisp.Cell)">
            <summary>Invoke the built-in function with a list of
            actual arguments.</summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.Interpreter">
            <summary>Core of the Lisp interpreter</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.Interpreter.Globals">
            <summary>Table of the global values of symbols</summary>
        </member>
        <member name="P:ServiceStack.Script.Lisp.Interpreter.COut">
            <summary>Standard out</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Interpreter.#ctor">
            <summary>Set each built-in function/variable as the global value
            of symbol.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Interpreter.WriteCacheFile(ServiceStack.Script.ScriptScopeContext,ServiceStack.IO.IVirtualPathProvider,System.String,System.ReadOnlyMemory{System.Char})">
            <summary>
            Cache final output from load reference 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Interpreter.lispContents(ServiceStack.Script.ScriptScopeContext,System.String)">
            <summary>
            Load examples:
              - file.l
              - virtual/path/file.l
              - index:lib-calc
              - index:lib-calc/lib1.l
              - gist:{gist-id}
              - gist:{gist-id}/single-file.l
              - https://mydomain.org/file.l
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Interpreter.Def(System.String,System.Int32,ServiceStack.Script.Lisp.BuiltInFuncBody)">
            <summary>Define a built-in function by a name, an arity,
            and a body.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Interpreter.Eval(System.Object,ServiceStack.Script.Lisp.Cell)">
            <summary>Evaluate a Lisp expression in an environment.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.QqExpand(System.Object)">
            <summary>Expand <c>x</c> of any quqsi-quotation <c>`x</c> into
            the equivalent S-expression.</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.QqQuote(System.Object)">
            <summary>Quote <c>x</c> so that the result evaluates to <c>x</c>.
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Parse(System.String)">
            <summary>
            Returns List of SExpression's
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Parse(System.ReadOnlyMemory{System.Char})">
            <summary>
            Returns List of SExpression's
            </summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Run(ServiceStack.Script.Lisp.Interpreter,ServiceStack.Script.Lisp.Reader)">
            <summary>Run Read-Eval Loop.</summary>
        </member>
        <member name="T:ServiceStack.Script.Lisp.Reader">
            <summary>Reader of Lisp expressions</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.Reader.EOF">
            <summary>Token of "End Of File"</summary>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Reader.Read">
            <summary>Read a Lisp expression and return it.</summary>
            <remarks>Return EOF if the input runs out.</remarks>
        </member>
        <member name="M:ServiceStack.Script.Lisp.Str(System.Object,System.Boolean)">
            <summary>Make a string representation of Lisp expression.</summary>
            <param name="x">Lisp expression</param>
            <param name="quoteString">flag whether to quote string</param>
        </member>
        <member name="M:ServiceStack.Script.Lisp.RunRepl(ServiceStack.Script.ScriptContext)">
            <summary>Run Read-Eval-Print Loop.</summary>
            <remarks>This never ends, use Ctrl+C to Exit. Exceptions are handled here and not thrown.</remarks>
        </member>
        <member name="F:ServiceStack.Script.Lisp.InitScript">
            <summary>Lisp initialization script</summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.LispCore">
            <summary>
            Lisp Common Utils 
            </summary>
        </member>
        <member name="F:ServiceStack.Script.Lisp.Extensions">
            <summary>
            Popular Clojure + nicer UX Utils
            </summary>
        </member>
        <member name="T:ServiceStack.Script.SharpScript">
            <summary>
            #Script Language which processes ```lang ... ``` blocks
            </summary>
        </member>
        <member name="T:ServiceStack.Script.ScriptTemplate">
            <summary>
            The #Script Default Template Language (does not process ```lang ... ``` blocks)
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.SharpScriptPage(ServiceStack.Script.ScriptContext,System.String)">
            <summary>
            Create SharpPage configured to use #Script 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.TemplateSharpPage(ServiceStack.Script.ScriptContext,System.String)">
            <summary>
            Create SharpPage configured to use #Script Templates 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.RenderScript(ServiceStack.Script.ScriptContext,System.String,ServiceStack.Script.ScriptException@)">
            <summary>
            Render #Script output to string
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.EvaluateScript(ServiceStack.Script.ScriptContext,System.String,ServiceStack.Script.ScriptException@)">
            <summary>
            Alias for EvaluateScript 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.RenderScript(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ServiceStack.Script.ScriptException@)">
            <summary>
            Render #Script output to string
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.EvaluateScript(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ServiceStack.Script.ScriptException@)">
            <summary>
            Alias for RenderScript 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.RenderScript(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Render #Script output to string
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.EvaluateScript(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Alias for RenderScript 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.RenderScriptAsync(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Render #Script output to string asynchronously
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.EvaluateScriptAsync(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Alias for RenderScriptAsync 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.Evaluate``1(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluate #Script and convert returned value to T 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.Evaluate(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluate #Script and return value 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.EvaluateAsync``1(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluate #Script and convert returned value to T asynchronously
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptTemplateUtils.EvaluateAsync(ServiceStack.Script.ScriptContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluate #Script and convert returned value to T asynchronously
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptScopeContextUtils.GetValue(ServiceStack.Script.ScriptScopeContext,System.String)">
            <summary>
            Resolve value from stored arguments and filters 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptScopeContextUtils.GetArgument(ServiceStack.Script.ScriptScopeContext,System.String)">
            <summary>
            Resolve value from stored arguments only 
            </summary>
        </member>
        <member name="M:ServiceStack.Script.ScriptScopeContextUtils.TryGetValue(ServiceStack.Script.ScriptScopeContext,System.String,System.Object@)">
            <summary>
            Try Resolve value from stored arguments and filters 
            </summary>
        </member>
        <member name="P:ServiceStack.Script.SharpPage.ScriptLanguage">
            <summary>
            Whether to evaluate as Template block or code block
            </summary>
        </member>
        <member name="M:ServiceStack.SiteUtils.UrlFromSlug(System.String)">
            <summary>
            Allow slugs to capture URLs, Examples:
            techstacks.io                  => https://techstacks.io
            http:techstacks.io             => http://techstacks.io
            techstacks.io:1000             => https://techstacks.io:1000
            techstacks.io:1000:site1:site2 => https://techstacks.io:1000/site1/site2
            techstacks.io:site1%7Csite2    => https://techstacks.io/site1|site2
            techstacks.io:1000:site1:site2(a:1,b:"c,d",e:f) => https://techstacks.io:1000/site1/site2(a:1,b:"c,d",e:f)
            </summary>
        </member>
        <member name="M:ServiceStack.SiteUtils.UrlToSlug(System.String)">
            <summary>
            Convert URL to URL-friendly slugs, Examples:
            https://techstacks.io                  => techstacks.io 
            http://techstacks.io                   => http:techstacks.io 
            https://techstacks.io:1000             => techstacks.io:1000 
            https://techstacks.io:1000/site1/site2 => techstacks.io:1000:site1:site2 
            https://techstacks.io/site1|site2      => techstacks.io:site|site2
            https://techstacks.io:1000/site1/site2(a:1,b:"c,d",e:f) => techstacks.io:1000:site1:site2(a:1,b:"c,d",e:f)
            </summary>
        </member>
        <member name="M:ServiceStack.StringUtils.ReplacePairs(System.String,System.String[])">
            <summary>
            Multiple string replacements
            </summary>
            <param name="str"></param>
            <param name="replaceStringsPairs">Even number of old and new value pairs</param>
        </member>
        <member name="M:ServiceStack.StringUtils.ReplaceOutsideOfQuotes(System.String,System.String[])">
            <summary>
            Replace string contents outside of string quotes 
            </summary>
        </member>
        <member name="M:ServiceStack.StringUtils.SafeInput(System.String)">
            <summary>
            Protect against XSS by cleaning non-standard User Input
            </summary>
        </member>
        <member name="T:ServiceStack.Support.AdapterBase">
            <summary>
            Common functionality when creating adapters
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified expression. 
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified expression. 
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified expression. 
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.Execute(System.Action)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the specified action (for void methods).
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
        </member>
        <member name="T:ServiceStack.Support.InMemoryLogFactory">
            <summary>
            Note: InMemoryLog keeps all logs in memory, so don't use it long running exceptions
            
            Returns a thread-safe InMemoryLog which you can use while *TESTING*
            to provide a detailed analysis of your logs.
            </summary>
        </member>
        <member name="T:ServiceStack.InstanceMapper">
            <summary>
            Delegate to return a different value from an instance (e.g. member accessor)
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetInvokerDelegate(System.Reflection.MethodInfo)">
            <summary>
            Create the correct Invoker Delegate Type based on the type of Method
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public instance methods
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetStaticInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public static methods
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetActionInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public instance void methods
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetStaticActionInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public static void methods
            </summary>
        </member>
        <member name="T:ServiceStack.UrnId">
            <summary>
            Creates a Unified Resource Name (URN) with the following formats:
            
            	- urn:{TypeName}:{IdFieldValue}						e.g. urn:UserSession:1
            	- urn:{TypeName}:{IdFieldName}:{IdFieldValue}		e.g. urn:UserSession:UserId:1			
            
            </summary>
        </member>
        <member name="T:ServiceStack.InputOptions">
            <summary>
            High-level Input options for rendering HTML Input controls
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.Inline">
            <summary>
            Display the Control inline 
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.Label">
            <summary>
            Label for the control
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.LabelClass">
            <summary>
            Class for Label
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.ErrorClass">
            <summary>
            Override the class on the error message (default: invalid-feedback)
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.Help">
            <summary>
            Small Help Text displayed with the control
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.Size">
            <summary>
            Bootstrap Size of the Control: sm, lg
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.Values">
            <summary>
            Multiple Value Data Source for Checkboxes, Radio boxes and Select Controls 
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.InputValues">
            <summary>
            Typed setter of Multi Input Values
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.PreserveValue">
            <summary>
            Whether to preserve value state after post back
            </summary>
        </member>
        <member name="P:ServiceStack.InputOptions.ShowErrors">
            <summary>
            Whether to show Error Message associated with this control
            </summary>
        </member>
        <member name="T:ServiceStack.BundleOptions">
            <summary>
            Customize JS/CSS/HTML bundles
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Sources">
            <summary>
            List of file and directory sources to include in this bundle, directory sources must end in `/`.
            Sources can include prefixes to specify which Virtual File System Source to use, options:
            'content:' (ContentRoot HostContext.VirtualFiles), 'filesystem:' (WebRoot FileSystem), 'memory:' (WebRoot Memory)
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.OutputTo">
            <summary>
            Write bundled file to this Virtual Path
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.OutputWebPath">
            <summary>
            If needed, use alternative OutputTo Virtual Path in html tag
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.PathBase">
            <summary>
            If needed, include PathBase prefix in output tag
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Minify">
            <summary>
            Whether to minify sources in bundle (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.SaveToDisk">
            <summary>
            Whether to save to disk or Memory File System (default Memory)
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Cache">
            <summary>
            Whether to return cached bundle if exists (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Bundle">
            <summary>
            Whether to bundle and emit single or not bundle and emit multiple html tags
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.RegisterModuleInAmd">
            <summary>
            Whether to call AMD define for CommonJS modules
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.IIFE">
            <summary>
            Whether to wrap JS scripts in an Immediately-Invoked Function Expression
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Async">
            <summary>
            Whether to "async" load script (default false)
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Defer">
            <summary>
            Whether to "defer" loading script (default false)
            </summary>
        </member>
        <member name="P:ServiceStack.BundleOptions.Module">
            <summary>
            Whether script should be loaded as a "module" (default false)
            </summary>
        </member>
        <member name="T:ServiceStack.NavDefaults">
            <summary>
            Generic collection of Nav Links
            </summary>
        </member>
        <member name="T:ServiceStack.NavLinkDefaults">
            <summary>
            Single NavLink List Item
            </summary>
        </member>
        <member name="T:ServiceStack.NavbarDefaults">
            <summary>
            Navigation Bar Menu Items
            </summary>
        </member>
        <member name="T:ServiceStack.NavButtonGroupDefaults">
            <summary>
            Collection of Link Buttons (e.g. used to render /auth buttons)
            </summary>
        </member>
        <member name="P:ServiceStack.NavOptions.Attributes">
            <summary>
            User Attributes for conditional rendering, e.g:
             - auth - User is Authenticated
             - role:name - User Role
             - perm:name - User Permission 
            </summary>
        </member>
        <member name="P:ServiceStack.NavOptions.ActivePath">
            <summary>
            Path Info that should set as active 
            </summary>
        </member>
        <member name="P:ServiceStack.NavOptions.BaseHref">
            <summary>
            Prefix to include before NavItem.Path (if any)
            </summary>
        </member>
        <member name="P:ServiceStack.NavOptions.NavClass">
            <summary>
            Custom classes applied to different navigation elements (defaults to Bootstrap classes)
            </summary>
        </member>
        <member name="T:ServiceStack.View">
            <summary>
            Public API for ViewUtils
            </summary>
        </member>
        <member name="T:ServiceStack.ViewUtils">
            <summary>
            Shared Utils shared between different Template Filters and Razor Views/Helpers
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.Nav(System.Collections.Generic.List{ServiceStack.NavItem},ServiceStack.NavOptions)">
            <summary>
             Display a list of NavItem's
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.NavLink(ServiceStack.NavItem,ServiceStack.NavOptions)">
            <summary>
            Display a `nav-link` nav-item
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.NavLink(System.Text.StringBuilder,ServiceStack.NavItem,ServiceStack.NavOptions)">
            <summary>
            Display a `nav-link` nav-item
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.HtmlHiddenInputs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Emit HTML hidden input field for each specified Key/Value pair entry
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.ToVarNames(System.String)">
            <summary>
            Comma delimited field names
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.ValidationSummary(ServiceStack.ResponseStatus,System.String)">
            <summary>
            Show validation summary error message unless there's an error in exceptFor list of fields
            as validation errors will be displayed along side the field instead
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.ValidationSuccess(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Display a "Success Alert Box"
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.ErrorResponseExcept(ServiceStack.ResponseStatus,System.String)">
            <summary>
            Return an error message unless there's an error in fieldNames
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.ErrorResponseSummary(ServiceStack.ResponseStatus)">
            <summary>
            Return an error message unless there are field errors
            </summary>
        </member>
        <member name="M:ServiceStack.ViewUtils.ErrorResponse(ServiceStack.ResponseStatus,System.String)">
            <summary>
            Return an error for the specified field (if any)  
            </summary>
        </member>
    </members>
</doc>
